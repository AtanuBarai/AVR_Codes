
HRM_for_Imtiaz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000090e  000009a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  000009c8  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000012a  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000cbf  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006bb  00000000  00000000  0000268b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f80  00000000  00000000  00002d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  00003cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003bb  00000000  00000000  00003e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000aa5  00000000  00000000  000041f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000127  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000098  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  8a:	0c 94 85 04 	jmp	0x90a	; 0x90a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_9>:
#include <stdio.h>
#include "lcd.h"
char rate=0;

ISR(TIMER1_OVF_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	00 d0       	rcall	.+0      	; 0xbe <__vector_9+0x2c>
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	//TCNT1H = (-29296)>>8;
	//TCNT1L = (-29296);
	lcd_clrscr();
  c4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_clrscr>
	lcd_home();
  c8:	0e 94 33 01 	call	0x266	; 0x266 <lcd_home>
	lcd_puts("Heart Rate : ");
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	char buffer[3];
	sprintf(buffer,"%d", rate*2);
  d4:	00 d0       	rcall	.+0      	; 0xd6 <__vector_9+0x44>
  d6:	00 d0       	rcall	.+0      	; 0xd8 <__vector_9+0x46>
  d8:	00 d0       	rcall	.+0      	; 0xda <__vector_9+0x48>
  da:	ed b7       	in	r30, 0x3d	; 61
  dc:	fe b7       	in	r31, 0x3e	; 62
  de:	31 96       	adiw	r30, 0x01	; 1
  e0:	8e 01       	movw	r16, r28
  e2:	0f 5f       	subi	r16, 0xFF	; 255
  e4:	1f 4f       	sbci	r17, 0xFF	; 255
  e6:	ad b7       	in	r26, 0x3d	; 61
  e8:	be b7       	in	r27, 0x3e	; 62
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	1c 93       	st	X, r17
  ee:	0e 93       	st	-X, r16
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	8e e6       	ldi	r24, 0x6E	; 110
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	93 83       	std	Z+3, r25	; 0x03
  f8:	82 83       	std	Z+2, r24	; 0x02
  fa:	80 91 86 00 	lds	r24, 0x0086
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	95 83       	std	Z+5, r25	; 0x05
 106:	84 83       	std	Z+4, r24	; 0x04
 108:	0e 94 a4 01 	call	0x348	; 0x348 <sprintf>
	lcd_puts(buffer);
 10c:	8d b7       	in	r24, 0x3d	; 61
 10e:	9e b7       	in	r25, 0x3e	; 62
 110:	06 96       	adiw	r24, 0x06	; 6
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	9e bf       	out	0x3e, r25	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	8d bf       	out	0x3d, r24	; 61
 11c:	c8 01       	movw	r24, r16
 11e:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
}
 122:	23 96       	adiw	r28, 0x03	; 3
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	7f 91       	pop	r23
 13a:	6f 91       	pop	r22
 13c:	5f 91       	pop	r21
 13e:	4f 91       	pop	r20
 140:	3f 91       	pop	r19
 142:	2f 91       	pop	r18
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_init>
	lcd_home();
 158:	0e 94 33 01 	call	0x266	; 0x266 <lcd_home>
	lcd_puts("Measuring Heart Rate");
 15c:	81 e7       	ldi	r24, 0x71	; 113
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_puts>
	DDRB = 0xF0;
 164:	80 ef       	ldi	r24, 0xF0	; 240
 166:	87 bb       	out	0x17, r24	; 23
	//TCNT1H = (-29296)>>8;
	//TCNT1L = (-29296);
	TCNT1 = (-29296);
 168:	80 e9       	ldi	r24, 0x90	; 144
 16a:	9d e8       	ldi	r25, 0x8D	; 141
 16c:	9d bd       	out	0x2d, r25	; 45
 16e:	8c bd       	out	0x2c, r24	; 44
	TCCR1A = 0x00;
 170:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00000101; //clk/1024 prescalar
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<TOIE1);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	89 bf       	out	0x39, r24	; 57
	sei();
 17a:	78 94       	sei
 17c:	90 91 86 00 	lds	r25, 0x0086
		if(PINB & 0x01)
		{
			while(PINB & 0x01);
			rate++;
		}
		PORTB ^= 0xF0;
 180:	20 ef       	ldi	r18, 0xF0	; 240
 182:	0c c0       	rjmp	.+24     	; 0x19c <main+0x4a>
 184:	88 b3       	in	r24, 0x18	; 24
 186:	82 27       	eor	r24, r18
 188:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	4f e9       	ldi	r20, 0x9F	; 159
 18c:	56 e8       	ldi	r21, 0x86	; 134
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	41 50       	subi	r20, 0x01	; 1
 192:	50 40       	sbci	r21, 0x00	; 0
 194:	60 40       	sbci	r22, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x3e>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x48>
 19a:	00 00       	nop
	TCCR1B = 0b00000101; //clk/1024 prescalar
	TIMSK = (1<<TOIE1);
	sei();
    while(1)
	{
		if(PINB & 0x01)
 19c:	b0 9b       	sbis	0x16, 0	; 22
 19e:	f2 cf       	rjmp	.-28     	; 0x184 <main+0x32>
		{
			while(PINB & 0x01);
 1a0:	b0 99       	sbic	0x16, 0	; 22
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0x4e>
			rate++;
 1a4:	9f 5f       	subi	r25, 0xFF	; 255
 1a6:	90 93 86 00 	sts	0x0086, r25
 1aa:	ec cf       	rjmp	.-40     	; 0x184 <main+0x32>

000001ac <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 1ac:	66 23       	and	r22, r22
 1ae:	c1 f4       	brne	.+48     	; 0x1e0 <lcd_write+0x34>
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 1b0:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
 1b2:	95 98       	cbi	0x12, 5	; 18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 1b4:	91 b3       	in	r25, 0x11	; 17
 1b6:	9f 60       	ori	r25, 0x0F	; 15
 1b8:	91 bb       	out	0x11, r25	; 17

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 1ba:	92 b3       	in	r25, 0x12	; 18
 1bc:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 1be:	28 2f       	mov	r18, r24
 1c0:	22 95       	swap	r18
 1c2:	2f 70       	andi	r18, 0x0F	; 15
 1c4:	29 2b       	or	r18, r25
 1c6:	22 bb       	out	0x12, r18	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1c8:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_write+0x20>
    lcd_e_low();
 1cc:	96 98       	cbi	0x12, 6	; 18
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 1ce:	8f 70       	andi	r24, 0x0F	; 15
 1d0:	89 2b       	or	r24, r25
 1d2:	82 bb       	out	0x12, r24	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1d4:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_write+0x2c>
    lcd_e_low();
 1d8:	96 98       	cbi	0x12, 6	; 18
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 1da:	9f 60       	ori	r25, 0x0F	; 15
 1dc:	92 bb       	out	0x12, r25	; 18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 1de:	08 95       	ret
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
 1e0:	94 9a       	sbi	0x12, 4	; 18
 1e2:	e7 cf       	rjmp	.-50     	; 0x1b2 <lcd_write+0x6>

000001e4 <lcd_read.clone.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 1e4:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 1e6:	95 9a       	sbi	0x12, 5	; 18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 1e8:	81 b3       	in	r24, 0x11	; 17
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	81 bb       	out	0x11, r24	; 17
        
        lcd_e_high();
 1ee:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_read.clone.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 1f2:	90 b3       	in	r25, 0x10	; 16
        lcd_e_low();
 1f4:	96 98       	cbi	0x12, 6	; 18
        
        lcd_e_delay();                       /* Enable 500ns low       */
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_read.clone.0+0x14>
        
        lcd_e_high();
 1f8:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_read.clone.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 1fc:	80 b3       	in	r24, 0x10	; 16
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 1fe:	92 95       	swap	r25
 200:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 202:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 204:	96 98       	cbi	0x12, 6	; 18
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 206:	89 2b       	or	r24, r25
 208:	08 95       	ret

0000020a <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 20a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_read.clone.0>
 20e:	87 fd       	sbrc	r24, 7
 210:	fc cf       	rjmp	.-8      	; 0x20a <lcd_waitbusy>
 delay loop for small accurate delays: 16-bit counter, 4 cycles/loop
*************************************************************************/
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 214:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_read.clone.0>
    
}/* lcd_waitbusy */
 218:	08 95       	ret

0000021a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 21a:	1f 93       	push	r17
 21c:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 21e:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
    lcd_write(cmd,0);
 222:	81 2f       	mov	r24, r17
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write>
}
 22a:	1f 91       	pop	r17
 22c:	08 95       	ret

0000022e <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 22e:	1f 93       	push	r17
 230:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 232:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
    lcd_write(data,1);
 236:	81 2f       	mov	r24, r17
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write>
}
 23e:	1f 91       	pop	r17
 240:	08 95       	ret

00000242 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 242:	66 23       	and	r22, r22
 244:	21 f0       	breq	.+8      	; 0x24e <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 246:	80 54       	subi	r24, 0x40	; 64
 248:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 24c:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 24e:	80 58       	subi	r24, 0x80	; 128
 250:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 254:	08 95       	ret

00000256 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 256:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
}
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	08 95       	ret

0000025e <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
}
 264:	08 95       	ret

00000266 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
}
 26c:	08 95       	ret

0000026e <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 26e:	1f 93       	push	r17
 270:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 272:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_waitbusy>
    if (c=='\n')
 276:	1a 30       	cpi	r17, 0x0A	; 10
 278:	31 f0       	breq	.+12     	; 0x286 <lcd_putc+0x18>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 27a:	81 2f       	mov	r24, r17
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write>
    }

}/* lcd_putc */
 282:	1f 91       	pop	r17
 284:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 286:	80 34       	cpi	r24, 0x40	; 64
 288:	28 f0       	brcs	.+10     	; 0x294 <lcd_putc+0x26>
 28a:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 28c:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 290:	1f 91       	pop	r17
 292:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 294:	80 ec       	ldi	r24, 0xC0	; 192
 296:	fa cf       	rjmp	.-12     	; 0x28c <lcd_putc+0x1e>

00000298 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 29e:	88 81       	ld	r24, Y
 2a0:	88 23       	and	r24, r24
 2a2:	31 f0       	breq	.+12     	; 0x2b0 <lcd_puts+0x18>
 2a4:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 2a6:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 2aa:	89 91       	ld	r24, Y+
 2ac:	88 23       	and	r24, r24
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 2bc:	fc 01       	movw	r30, r24
 2be:	84 91       	lpm	r24, Z+
 2c0:	88 23       	and	r24, r24
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <lcd_puts_p+0x1e>
 2c4:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 2c6:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_putc>
 2ca:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 2cc:	21 96       	adiw	r28, 0x01	; 1
 2ce:	84 91       	lpm	r24, Z+
 2d0:	88 23       	and	r24, r24
 2d2:	c9 f7       	brne	.-14     	; 0x2c6 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 2da:	1f 93       	push	r17
 2dc:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 2de:	81 b3       	in	r24, 0x11	; 17
 2e0:	8f 67       	ori	r24, 0x7F	; 127
 2e2:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2e4:	e0 ea       	ldi	r30, 0xA0	; 160
 2e6:	ff e0       	ldi	r31, 0x0F	; 15
 2e8:	31 97       	sbiw	r30, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 2ec:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 2ee:	90 9a       	sbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2f0:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0x1a>
    lcd_e_low();
 2f4:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2f6:	e0 ee       	ldi	r30, 0xE0	; 224
 2f8:	f4 e0       	ldi	r31, 0x04	; 4
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2fe:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 300:	00 c0       	rjmp	.+0      	; 0x302 <lcd_init+0x28>
    lcd_e_low();
 302:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 304:	20 e1       	ldi	r18, 0x10	; 16
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	f9 01       	movw	r30, r18
 30a:	31 97       	sbiw	r30, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 30e:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 310:	00 c0       	rjmp	.+0      	; 0x312 <lcd_init+0x38>
    lcd_e_low();
 312:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 314:	f9 01       	movw	r30, r18
 316:	31 97       	sbiw	r30, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 31a:	90 98       	cbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 31c:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 31e:	00 c0       	rjmp	.+0      	; 0x320 <lcd_init+0x46>
    lcd_e_low();
 320:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 322:	f9 01       	movw	r30, r18
 324:	31 97       	sbiw	r30, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 328:	88 e2       	ldi	r24, 0x28	; 40
 32a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 334:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 33e:	81 2f       	mov	r24, r17
 340:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>

}/* lcd_init */
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <sprintf>:
 348:	ae e0       	ldi	r26, 0x0E	; 14
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	ea ea       	ldi	r30, 0xAA	; 170
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__prologue_saves__+0x1c>
 354:	0d 89       	ldd	r16, Y+21	; 0x15
 356:	1e 89       	ldd	r17, Y+22	; 0x16
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	8c 83       	std	Y+4, r24	; 0x04
 35c:	1a 83       	std	Y+2, r17	; 0x02
 35e:	09 83       	std	Y+1, r16	; 0x01
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	9f e7       	ldi	r25, 0x7F	; 127
 364:	9e 83       	std	Y+6, r25	; 0x06
 366:	8d 83       	std	Y+5, r24	; 0x05
 368:	9e 01       	movw	r18, r28
 36a:	27 5e       	subi	r18, 0xE7	; 231
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	ce 01       	movw	r24, r28
 370:	01 96       	adiw	r24, 0x01	; 1
 372:	6f 89       	ldd	r22, Y+23	; 0x17
 374:	78 8d       	ldd	r23, Y+24	; 0x18
 376:	a9 01       	movw	r20, r18
 378:	0e 94 c7 01 	call	0x38e	; 0x38e <vfprintf>
 37c:	ef 81       	ldd	r30, Y+7	; 0x07
 37e:	f8 85       	ldd	r31, Y+8	; 0x08
 380:	e0 0f       	add	r30, r16
 382:	f1 1f       	adc	r31, r17
 384:	10 82       	st	Z, r1
 386:	2e 96       	adiw	r28, 0x0e	; 14
 388:	e4 e0       	ldi	r30, 0x04	; 4
 38a:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__epilogue_restores__+0x1c>

0000038e <vfprintf>:
 38e:	ac e0       	ldi	r26, 0x0C	; 12
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	ed ec       	ldi	r30, 0xCD	; 205
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__prologue_saves__>
 39a:	6c 01       	movw	r12, r24
 39c:	1b 01       	movw	r2, r22
 39e:	8a 01       	movw	r16, r20
 3a0:	fc 01       	movw	r30, r24
 3a2:	17 82       	std	Z+7, r1	; 0x07
 3a4:	16 82       	std	Z+6, r1	; 0x06
 3a6:	83 81       	ldd	r24, Z+3	; 0x03
 3a8:	81 ff       	sbrs	r24, 1
 3aa:	d1 c1       	rjmp	.+930    	; 0x74e <vfprintf+0x3c0>
 3ac:	2e 01       	movw	r4, r28
 3ae:	08 94       	sec
 3b0:	41 1c       	adc	r4, r1
 3b2:	51 1c       	adc	r5, r1
 3b4:	f6 01       	movw	r30, r12
 3b6:	93 81       	ldd	r25, Z+3	; 0x03
 3b8:	f1 01       	movw	r30, r2
 3ba:	93 fd       	sbrc	r25, 3
 3bc:	85 91       	lpm	r24, Z+
 3be:	93 ff       	sbrs	r25, 3
 3c0:	81 91       	ld	r24, Z+
 3c2:	1f 01       	movw	r2, r30
 3c4:	88 23       	and	r24, r24
 3c6:	09 f4       	brne	.+2      	; 0x3ca <vfprintf+0x3c>
 3c8:	be c1       	rjmp	.+892    	; 0x746 <vfprintf+0x3b8>
 3ca:	85 32       	cpi	r24, 0x25	; 37
 3cc:	39 f4       	brne	.+14     	; 0x3dc <vfprintf+0x4e>
 3ce:	93 fd       	sbrc	r25, 3
 3d0:	85 91       	lpm	r24, Z+
 3d2:	93 ff       	sbrs	r25, 3
 3d4:	81 91       	ld	r24, Z+
 3d6:	1f 01       	movw	r2, r30
 3d8:	85 32       	cpi	r24, 0x25	; 37
 3da:	29 f4       	brne	.+10     	; 0x3e6 <vfprintf+0x58>
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	b6 01       	movw	r22, r12
 3e0:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 3e4:	e7 cf       	rjmp	.-50     	; 0x3b4 <vfprintf+0x26>
 3e6:	ee 24       	eor	r14, r14
 3e8:	ff 24       	eor	r15, r15
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	20 32       	cpi	r18, 0x20	; 32
 3ee:	b0 f4       	brcc	.+44     	; 0x41c <vfprintf+0x8e>
 3f0:	8b 32       	cpi	r24, 0x2B	; 43
 3f2:	69 f0       	breq	.+26     	; 0x40e <vfprintf+0x80>
 3f4:	8c 32       	cpi	r24, 0x2C	; 44
 3f6:	28 f4       	brcc	.+10     	; 0x402 <vfprintf+0x74>
 3f8:	80 32       	cpi	r24, 0x20	; 32
 3fa:	51 f0       	breq	.+20     	; 0x410 <vfprintf+0x82>
 3fc:	83 32       	cpi	r24, 0x23	; 35
 3fe:	71 f4       	brne	.+28     	; 0x41c <vfprintf+0x8e>
 400:	0b c0       	rjmp	.+22     	; 0x418 <vfprintf+0x8a>
 402:	8d 32       	cpi	r24, 0x2D	; 45
 404:	39 f0       	breq	.+14     	; 0x414 <vfprintf+0x86>
 406:	80 33       	cpi	r24, 0x30	; 48
 408:	49 f4       	brne	.+18     	; 0x41c <vfprintf+0x8e>
 40a:	21 60       	ori	r18, 0x01	; 1
 40c:	2c c0       	rjmp	.+88     	; 0x466 <vfprintf+0xd8>
 40e:	22 60       	ori	r18, 0x02	; 2
 410:	24 60       	ori	r18, 0x04	; 4
 412:	29 c0       	rjmp	.+82     	; 0x466 <vfprintf+0xd8>
 414:	28 60       	ori	r18, 0x08	; 8
 416:	27 c0       	rjmp	.+78     	; 0x466 <vfprintf+0xd8>
 418:	20 61       	ori	r18, 0x10	; 16
 41a:	25 c0       	rjmp	.+74     	; 0x466 <vfprintf+0xd8>
 41c:	27 fd       	sbrc	r18, 7
 41e:	2c c0       	rjmp	.+88     	; 0x478 <vfprintf+0xea>
 420:	38 2f       	mov	r19, r24
 422:	30 53       	subi	r19, 0x30	; 48
 424:	3a 30       	cpi	r19, 0x0A	; 10
 426:	98 f4       	brcc	.+38     	; 0x44e <vfprintf+0xc0>
 428:	26 ff       	sbrs	r18, 6
 42a:	08 c0       	rjmp	.+16     	; 0x43c <vfprintf+0xae>
 42c:	8e 2d       	mov	r24, r14
 42e:	88 0f       	add	r24, r24
 430:	e8 2e       	mov	r14, r24
 432:	ee 0c       	add	r14, r14
 434:	ee 0c       	add	r14, r14
 436:	e8 0e       	add	r14, r24
 438:	e3 0e       	add	r14, r19
 43a:	15 c0       	rjmp	.+42     	; 0x466 <vfprintf+0xd8>
 43c:	8f 2d       	mov	r24, r15
 43e:	88 0f       	add	r24, r24
 440:	f8 2e       	mov	r15, r24
 442:	ff 0c       	add	r15, r15
 444:	ff 0c       	add	r15, r15
 446:	f8 0e       	add	r15, r24
 448:	f3 0e       	add	r15, r19
 44a:	20 62       	ori	r18, 0x20	; 32
 44c:	0c c0       	rjmp	.+24     	; 0x466 <vfprintf+0xd8>
 44e:	8e 32       	cpi	r24, 0x2E	; 46
 450:	21 f4       	brne	.+8      	; 0x45a <vfprintf+0xcc>
 452:	26 fd       	sbrc	r18, 6
 454:	78 c1       	rjmp	.+752    	; 0x746 <vfprintf+0x3b8>
 456:	20 64       	ori	r18, 0x40	; 64
 458:	06 c0       	rjmp	.+12     	; 0x466 <vfprintf+0xd8>
 45a:	8c 36       	cpi	r24, 0x6C	; 108
 45c:	11 f4       	brne	.+4      	; 0x462 <vfprintf+0xd4>
 45e:	20 68       	ori	r18, 0x80	; 128
 460:	02 c0       	rjmp	.+4      	; 0x466 <vfprintf+0xd8>
 462:	88 36       	cpi	r24, 0x68	; 104
 464:	49 f4       	brne	.+18     	; 0x478 <vfprintf+0xea>
 466:	f1 01       	movw	r30, r2
 468:	93 fd       	sbrc	r25, 3
 46a:	85 91       	lpm	r24, Z+
 46c:	93 ff       	sbrs	r25, 3
 46e:	81 91       	ld	r24, Z+
 470:	1f 01       	movw	r2, r30
 472:	88 23       	and	r24, r24
 474:	09 f0       	breq	.+2      	; 0x478 <vfprintf+0xea>
 476:	ba cf       	rjmp	.-140    	; 0x3ec <vfprintf+0x5e>
 478:	98 2f       	mov	r25, r24
 47a:	95 54       	subi	r25, 0x45	; 69
 47c:	93 30       	cpi	r25, 0x03	; 3
 47e:	18 f0       	brcs	.+6      	; 0x486 <vfprintf+0xf8>
 480:	90 52       	subi	r25, 0x20	; 32
 482:	93 30       	cpi	r25, 0x03	; 3
 484:	28 f4       	brcc	.+10     	; 0x490 <vfprintf+0x102>
 486:	0c 5f       	subi	r16, 0xFC	; 252
 488:	1f 4f       	sbci	r17, 0xFF	; 255
 48a:	ff e3       	ldi	r31, 0x3F	; 63
 48c:	f9 83       	std	Y+1, r31	; 0x01
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <vfprintf+0x11c>
 490:	83 36       	cpi	r24, 0x63	; 99
 492:	31 f0       	breq	.+12     	; 0x4a0 <vfprintf+0x112>
 494:	83 37       	cpi	r24, 0x73	; 115
 496:	71 f0       	breq	.+28     	; 0x4b4 <vfprintf+0x126>
 498:	83 35       	cpi	r24, 0x53	; 83
 49a:	09 f0       	breq	.+2      	; 0x49e <vfprintf+0x110>
 49c:	60 c0       	rjmp	.+192    	; 0x55e <vfprintf+0x1d0>
 49e:	22 c0       	rjmp	.+68     	; 0x4e4 <vfprintf+0x156>
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 81       	ld	r24, Z
 4a4:	89 83       	std	Y+1, r24	; 0x01
 4a6:	0e 5f       	subi	r16, 0xFE	; 254
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
 4aa:	42 01       	movw	r8, r4
 4ac:	71 e0       	ldi	r23, 0x01	; 1
 4ae:	a7 2e       	mov	r10, r23
 4b0:	b1 2c       	mov	r11, r1
 4b2:	16 c0       	rjmp	.+44     	; 0x4e0 <vfprintf+0x152>
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	66 2e       	mov	r6, r22
 4b8:	71 2c       	mov	r7, r1
 4ba:	60 0e       	add	r6, r16
 4bc:	71 1e       	adc	r7, r17
 4be:	f8 01       	movw	r30, r16
 4c0:	80 80       	ld	r8, Z
 4c2:	91 80       	ldd	r9, Z+1	; 0x01
 4c4:	26 ff       	sbrs	r18, 6
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <vfprintf+0x140>
 4c8:	6e 2d       	mov	r22, r14
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <vfprintf+0x144>
 4ce:	6f ef       	ldi	r22, 0xFF	; 255
 4d0:	7f ef       	ldi	r23, 0xFF	; 255
 4d2:	c4 01       	movw	r24, r8
 4d4:	2c 87       	std	Y+12, r18	; 0x0c
 4d6:	0e 94 b9 03 	call	0x772	; 0x772 <strnlen>
 4da:	5c 01       	movw	r10, r24
 4dc:	83 01       	movw	r16, r6
 4de:	2c 85       	ldd	r18, Y+12	; 0x0c
 4e0:	2f 77       	andi	r18, 0x7F	; 127
 4e2:	17 c0       	rjmp	.+46     	; 0x512 <vfprintf+0x184>
 4e4:	52 e0       	ldi	r21, 0x02	; 2
 4e6:	65 2e       	mov	r6, r21
 4e8:	71 2c       	mov	r7, r1
 4ea:	60 0e       	add	r6, r16
 4ec:	71 1e       	adc	r7, r17
 4ee:	f8 01       	movw	r30, r16
 4f0:	80 80       	ld	r8, Z
 4f2:	91 80       	ldd	r9, Z+1	; 0x01
 4f4:	26 ff       	sbrs	r18, 6
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <vfprintf+0x170>
 4f8:	6e 2d       	mov	r22, r14
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <vfprintf+0x174>
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
 500:	7f ef       	ldi	r23, 0xFF	; 255
 502:	c4 01       	movw	r24, r8
 504:	2c 87       	std	Y+12, r18	; 0x0c
 506:	0e 94 ae 03 	call	0x75c	; 0x75c <strnlen_P>
 50a:	5c 01       	movw	r10, r24
 50c:	2c 85       	ldd	r18, Y+12	; 0x0c
 50e:	20 68       	ori	r18, 0x80	; 128
 510:	83 01       	movw	r16, r6
 512:	23 fd       	sbrc	r18, 3
 514:	20 c0       	rjmp	.+64     	; 0x556 <vfprintf+0x1c8>
 516:	08 c0       	rjmp	.+16     	; 0x528 <vfprintf+0x19a>
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	b6 01       	movw	r22, r12
 51e:	2c 87       	std	Y+12, r18	; 0x0c
 520:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 524:	fa 94       	dec	r15
 526:	2c 85       	ldd	r18, Y+12	; 0x0c
 528:	8f 2d       	mov	r24, r15
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	a8 16       	cp	r10, r24
 52e:	b9 06       	cpc	r11, r25
 530:	98 f3       	brcs	.-26     	; 0x518 <vfprintf+0x18a>
 532:	11 c0       	rjmp	.+34     	; 0x556 <vfprintf+0x1c8>
 534:	f4 01       	movw	r30, r8
 536:	27 fd       	sbrc	r18, 7
 538:	85 91       	lpm	r24, Z+
 53a:	27 ff       	sbrs	r18, 7
 53c:	81 91       	ld	r24, Z+
 53e:	4f 01       	movw	r8, r30
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	b6 01       	movw	r22, r12
 544:	2c 87       	std	Y+12, r18	; 0x0c
 546:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 54a:	2c 85       	ldd	r18, Y+12	; 0x0c
 54c:	f1 10       	cpse	r15, r1
 54e:	fa 94       	dec	r15
 550:	08 94       	sec
 552:	a1 08       	sbc	r10, r1
 554:	b1 08       	sbc	r11, r1
 556:	a1 14       	cp	r10, r1
 558:	b1 04       	cpc	r11, r1
 55a:	61 f7       	brne	.-40     	; 0x534 <vfprintf+0x1a6>
 55c:	f1 c0       	rjmp	.+482    	; 0x740 <vfprintf+0x3b2>
 55e:	84 36       	cpi	r24, 0x64	; 100
 560:	11 f0       	breq	.+4      	; 0x566 <vfprintf+0x1d8>
 562:	89 36       	cpi	r24, 0x69	; 105
 564:	49 f5       	brne	.+82     	; 0x5b8 <vfprintf+0x22a>
 566:	27 ff       	sbrs	r18, 7
 568:	08 c0       	rjmp	.+16     	; 0x57a <vfprintf+0x1ec>
 56a:	f8 01       	movw	r30, r16
 56c:	60 81       	ld	r22, Z
 56e:	71 81       	ldd	r23, Z+1	; 0x01
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	0c 5f       	subi	r16, 0xFC	; 252
 576:	1f 4f       	sbci	r17, 0xFF	; 255
 578:	09 c0       	rjmp	.+18     	; 0x58c <vfprintf+0x1fe>
 57a:	f8 01       	movw	r30, r16
 57c:	60 81       	ld	r22, Z
 57e:	71 81       	ldd	r23, Z+1	; 0x01
 580:	88 27       	eor	r24, r24
 582:	77 fd       	sbrc	r23, 7
 584:	80 95       	com	r24
 586:	98 2f       	mov	r25, r24
 588:	0e 5f       	subi	r16, 0xFE	; 254
 58a:	1f 4f       	sbci	r17, 0xFF	; 255
 58c:	4f e6       	ldi	r20, 0x6F	; 111
 58e:	b4 2e       	mov	r11, r20
 590:	b2 22       	and	r11, r18
 592:	97 ff       	sbrs	r25, 7
 594:	09 c0       	rjmp	.+18     	; 0x5a8 <vfprintf+0x21a>
 596:	90 95       	com	r25
 598:	80 95       	com	r24
 59a:	70 95       	com	r23
 59c:	61 95       	neg	r22
 59e:	7f 4f       	sbci	r23, 0xFF	; 255
 5a0:	8f 4f       	sbci	r24, 0xFF	; 255
 5a2:	9f 4f       	sbci	r25, 0xFF	; 255
 5a4:	f0 e8       	ldi	r31, 0x80	; 128
 5a6:	bf 2a       	or	r11, r31
 5a8:	a2 01       	movw	r20, r4
 5aa:	2a e0       	ldi	r18, 0x0A	; 10
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__ultoa_invert>
 5b2:	78 2e       	mov	r7, r24
 5b4:	74 18       	sub	r7, r4
 5b6:	45 c0       	rjmp	.+138    	; 0x642 <vfprintf+0x2b4>
 5b8:	85 37       	cpi	r24, 0x75	; 117
 5ba:	31 f4       	brne	.+12     	; 0x5c8 <vfprintf+0x23a>
 5bc:	3f ee       	ldi	r19, 0xEF	; 239
 5be:	b3 2e       	mov	r11, r19
 5c0:	b2 22       	and	r11, r18
 5c2:	2a e0       	ldi	r18, 0x0A	; 10
 5c4:	30 e0       	ldi	r19, 0x00	; 0
 5c6:	25 c0       	rjmp	.+74     	; 0x612 <vfprintf+0x284>
 5c8:	99 ef       	ldi	r25, 0xF9	; 249
 5ca:	b9 2e       	mov	r11, r25
 5cc:	b2 22       	and	r11, r18
 5ce:	8f 36       	cpi	r24, 0x6F	; 111
 5d0:	c1 f0       	breq	.+48     	; 0x602 <vfprintf+0x274>
 5d2:	80 37       	cpi	r24, 0x70	; 112
 5d4:	20 f4       	brcc	.+8      	; 0x5de <vfprintf+0x250>
 5d6:	88 35       	cpi	r24, 0x58	; 88
 5d8:	09 f0       	breq	.+2      	; 0x5dc <vfprintf+0x24e>
 5da:	b5 c0       	rjmp	.+362    	; 0x746 <vfprintf+0x3b8>
 5dc:	0d c0       	rjmp	.+26     	; 0x5f8 <vfprintf+0x26a>
 5de:	80 37       	cpi	r24, 0x70	; 112
 5e0:	21 f0       	breq	.+8      	; 0x5ea <vfprintf+0x25c>
 5e2:	88 37       	cpi	r24, 0x78	; 120
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <vfprintf+0x25a>
 5e6:	af c0       	rjmp	.+350    	; 0x746 <vfprintf+0x3b8>
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <vfprintf+0x260>
 5ea:	20 e1       	ldi	r18, 0x10	; 16
 5ec:	b2 2a       	or	r11, r18
 5ee:	b4 fe       	sbrs	r11, 4
 5f0:	0b c0       	rjmp	.+22     	; 0x608 <vfprintf+0x27a>
 5f2:	84 e0       	ldi	r24, 0x04	; 4
 5f4:	b8 2a       	or	r11, r24
 5f6:	08 c0       	rjmp	.+16     	; 0x608 <vfprintf+0x27a>
 5f8:	b4 fe       	sbrs	r11, 4
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <vfprintf+0x280>
 5fc:	e6 e0       	ldi	r30, 0x06	; 6
 5fe:	be 2a       	or	r11, r30
 600:	06 c0       	rjmp	.+12     	; 0x60e <vfprintf+0x280>
 602:	28 e0       	ldi	r18, 0x08	; 8
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	05 c0       	rjmp	.+10     	; 0x612 <vfprintf+0x284>
 608:	20 e1       	ldi	r18, 0x10	; 16
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <vfprintf+0x284>
 60e:	20 e1       	ldi	r18, 0x10	; 16
 610:	32 e0       	ldi	r19, 0x02	; 2
 612:	b7 fe       	sbrs	r11, 7
 614:	08 c0       	rjmp	.+16     	; 0x626 <vfprintf+0x298>
 616:	f8 01       	movw	r30, r16
 618:	60 81       	ld	r22, Z
 61a:	71 81       	ldd	r23, Z+1	; 0x01
 61c:	82 81       	ldd	r24, Z+2	; 0x02
 61e:	93 81       	ldd	r25, Z+3	; 0x03
 620:	0c 5f       	subi	r16, 0xFC	; 252
 622:	1f 4f       	sbci	r17, 0xFF	; 255
 624:	07 c0       	rjmp	.+14     	; 0x634 <vfprintf+0x2a6>
 626:	f8 01       	movw	r30, r16
 628:	60 81       	ld	r22, Z
 62a:	71 81       	ldd	r23, Z+1	; 0x01
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 5f       	subi	r16, 0xFE	; 254
 632:	1f 4f       	sbci	r17, 0xFF	; 255
 634:	a2 01       	movw	r20, r4
 636:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__ultoa_invert>
 63a:	78 2e       	mov	r7, r24
 63c:	74 18       	sub	r7, r4
 63e:	ff e7       	ldi	r31, 0x7F	; 127
 640:	bf 22       	and	r11, r31
 642:	b6 fe       	sbrs	r11, 6
 644:	0b c0       	rjmp	.+22     	; 0x65c <vfprintf+0x2ce>
 646:	2e ef       	ldi	r18, 0xFE	; 254
 648:	b2 22       	and	r11, r18
 64a:	7e 14       	cp	r7, r14
 64c:	38 f4       	brcc	.+14     	; 0x65c <vfprintf+0x2ce>
 64e:	b4 fe       	sbrs	r11, 4
 650:	07 c0       	rjmp	.+14     	; 0x660 <vfprintf+0x2d2>
 652:	b2 fc       	sbrc	r11, 2
 654:	05 c0       	rjmp	.+10     	; 0x660 <vfprintf+0x2d2>
 656:	8f ee       	ldi	r24, 0xEF	; 239
 658:	b8 22       	and	r11, r24
 65a:	02 c0       	rjmp	.+4      	; 0x660 <vfprintf+0x2d2>
 65c:	a7 2c       	mov	r10, r7
 65e:	01 c0       	rjmp	.+2      	; 0x662 <vfprintf+0x2d4>
 660:	ae 2c       	mov	r10, r14
 662:	8b 2d       	mov	r24, r11
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	b4 fe       	sbrs	r11, 4
 668:	0d c0       	rjmp	.+26     	; 0x684 <vfprintf+0x2f6>
 66a:	fe 01       	movw	r30, r28
 66c:	e7 0d       	add	r30, r7
 66e:	f1 1d       	adc	r31, r1
 670:	20 81       	ld	r18, Z
 672:	20 33       	cpi	r18, 0x30	; 48
 674:	19 f4       	brne	.+6      	; 0x67c <vfprintf+0x2ee>
 676:	e9 ee       	ldi	r30, 0xE9	; 233
 678:	be 22       	and	r11, r30
 67a:	09 c0       	rjmp	.+18     	; 0x68e <vfprintf+0x300>
 67c:	a3 94       	inc	r10
 67e:	b2 fe       	sbrs	r11, 2
 680:	06 c0       	rjmp	.+12     	; 0x68e <vfprintf+0x300>
 682:	04 c0       	rjmp	.+8      	; 0x68c <vfprintf+0x2fe>
 684:	86 78       	andi	r24, 0x86	; 134
 686:	90 70       	andi	r25, 0x00	; 0
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	09 f0       	breq	.+2      	; 0x68e <vfprintf+0x300>
 68c:	a3 94       	inc	r10
 68e:	8b 2c       	mov	r8, r11
 690:	99 24       	eor	r9, r9
 692:	b3 fc       	sbrc	r11, 3
 694:	14 c0       	rjmp	.+40     	; 0x6be <vfprintf+0x330>
 696:	b0 fe       	sbrs	r11, 0
 698:	0f c0       	rjmp	.+30     	; 0x6b8 <vfprintf+0x32a>
 69a:	af 14       	cp	r10, r15
 69c:	28 f4       	brcc	.+10     	; 0x6a8 <vfprintf+0x31a>
 69e:	e7 2c       	mov	r14, r7
 6a0:	ef 0c       	add	r14, r15
 6a2:	ea 18       	sub	r14, r10
 6a4:	af 2c       	mov	r10, r15
 6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <vfprintf+0x32a>
 6a8:	e7 2c       	mov	r14, r7
 6aa:	06 c0       	rjmp	.+12     	; 0x6b8 <vfprintf+0x32a>
 6ac:	80 e2       	ldi	r24, 0x20	; 32
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	b6 01       	movw	r22, r12
 6b2:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 6b6:	a3 94       	inc	r10
 6b8:	af 14       	cp	r10, r15
 6ba:	c0 f3       	brcs	.-16     	; 0x6ac <vfprintf+0x31e>
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <vfprintf+0x338>
 6be:	af 14       	cp	r10, r15
 6c0:	10 f4       	brcc	.+4      	; 0x6c6 <vfprintf+0x338>
 6c2:	fa 18       	sub	r15, r10
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <vfprintf+0x33a>
 6c6:	ff 24       	eor	r15, r15
 6c8:	84 fe       	sbrs	r8, 4
 6ca:	0f c0       	rjmp	.+30     	; 0x6ea <vfprintf+0x35c>
 6cc:	80 e3       	ldi	r24, 0x30	; 48
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	b6 01       	movw	r22, r12
 6d2:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 6d6:	82 fe       	sbrs	r8, 2
 6d8:	1f c0       	rjmp	.+62     	; 0x718 <vfprintf+0x38a>
 6da:	81 fe       	sbrs	r8, 1
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <vfprintf+0x356>
 6de:	88 e5       	ldi	r24, 0x58	; 88
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	10 c0       	rjmp	.+32     	; 0x704 <vfprintf+0x376>
 6e4:	88 e7       	ldi	r24, 0x78	; 120
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <vfprintf+0x376>
 6ea:	c4 01       	movw	r24, r8
 6ec:	86 78       	andi	r24, 0x86	; 134
 6ee:	90 70       	andi	r25, 0x00	; 0
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	91 f0       	breq	.+36     	; 0x718 <vfprintf+0x38a>
 6f4:	81 fc       	sbrc	r8, 1
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x36e>
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <vfprintf+0x370>
 6fc:	8b e2       	ldi	r24, 0x2B	; 43
 6fe:	b7 fc       	sbrc	r11, 7
 700:	8d e2       	ldi	r24, 0x2D	; 45
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	b6 01       	movw	r22, r12
 706:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 70a:	06 c0       	rjmp	.+12     	; 0x718 <vfprintf+0x38a>
 70c:	80 e3       	ldi	r24, 0x30	; 48
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	b6 01       	movw	r22, r12
 712:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 716:	ea 94       	dec	r14
 718:	7e 14       	cp	r7, r14
 71a:	c0 f3       	brcs	.-16     	; 0x70c <vfprintf+0x37e>
 71c:	7a 94       	dec	r7
 71e:	f2 01       	movw	r30, r4
 720:	e7 0d       	add	r30, r7
 722:	f1 1d       	adc	r31, r1
 724:	80 81       	ld	r24, Z
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	b6 01       	movw	r22, r12
 72a:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 72e:	77 20       	and	r7, r7
 730:	a9 f7       	brne	.-22     	; 0x71c <vfprintf+0x38e>
 732:	06 c0       	rjmp	.+12     	; 0x740 <vfprintf+0x3b2>
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b6 01       	movw	r22, r12
 73a:	0e 94 c4 03 	call	0x788	; 0x788 <fputc>
 73e:	fa 94       	dec	r15
 740:	ff 20       	and	r15, r15
 742:	c1 f7       	brne	.-16     	; 0x734 <vfprintf+0x3a6>
 744:	37 ce       	rjmp	.-914    	; 0x3b4 <vfprintf+0x26>
 746:	f6 01       	movw	r30, r12
 748:	26 81       	ldd	r18, Z+6	; 0x06
 74a:	37 81       	ldd	r19, Z+7	; 0x07
 74c:	02 c0       	rjmp	.+4      	; 0x752 <vfprintf+0x3c4>
 74e:	2f ef       	ldi	r18, 0xFF	; 255
 750:	3f ef       	ldi	r19, 0xFF	; 255
 752:	c9 01       	movw	r24, r18
 754:	2c 96       	adiw	r28, 0x0c	; 12
 756:	e2 e1       	ldi	r30, 0x12	; 18
 758:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__epilogue_restores__>

0000075c <strnlen_P>:
 75c:	fc 01       	movw	r30, r24
 75e:	05 90       	lpm	r0, Z+
 760:	61 50       	subi	r22, 0x01	; 1
 762:	70 40       	sbci	r23, 0x00	; 0
 764:	01 10       	cpse	r0, r1
 766:	d8 f7       	brcc	.-10     	; 0x75e <strnlen_P+0x2>
 768:	80 95       	com	r24
 76a:	90 95       	com	r25
 76c:	8e 0f       	add	r24, r30
 76e:	9f 1f       	adc	r25, r31
 770:	08 95       	ret

00000772 <strnlen>:
 772:	fc 01       	movw	r30, r24
 774:	61 50       	subi	r22, 0x01	; 1
 776:	70 40       	sbci	r23, 0x00	; 0
 778:	01 90       	ld	r0, Z+
 77a:	01 10       	cpse	r0, r1
 77c:	d8 f7       	brcc	.-10     	; 0x774 <strnlen+0x2>
 77e:	80 95       	com	r24
 780:	90 95       	com	r25
 782:	8e 0f       	add	r24, r30
 784:	9f 1f       	adc	r25, r31
 786:	08 95       	ret

00000788 <fputc>:
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	8c 01       	movw	r16, r24
 792:	eb 01       	movw	r28, r22
 794:	8b 81       	ldd	r24, Y+3	; 0x03
 796:	81 ff       	sbrs	r24, 1
 798:	1b c0       	rjmp	.+54     	; 0x7d0 <fputc+0x48>
 79a:	82 ff       	sbrs	r24, 2
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <fputc+0x30>
 79e:	2e 81       	ldd	r18, Y+6	; 0x06
 7a0:	3f 81       	ldd	r19, Y+7	; 0x07
 7a2:	8c 81       	ldd	r24, Y+4	; 0x04
 7a4:	9d 81       	ldd	r25, Y+5	; 0x05
 7a6:	28 17       	cp	r18, r24
 7a8:	39 07       	cpc	r19, r25
 7aa:	64 f4       	brge	.+24     	; 0x7c4 <fputc+0x3c>
 7ac:	e8 81       	ld	r30, Y
 7ae:	f9 81       	ldd	r31, Y+1	; 0x01
 7b0:	01 93       	st	Z+, r16
 7b2:	f9 83       	std	Y+1, r31	; 0x01
 7b4:	e8 83       	st	Y, r30
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <fputc+0x3c>
 7b8:	e8 85       	ldd	r30, Y+8	; 0x08
 7ba:	f9 85       	ldd	r31, Y+9	; 0x09
 7bc:	80 2f       	mov	r24, r16
 7be:	09 95       	icall
 7c0:	00 97       	sbiw	r24, 0x00	; 0
 7c2:	31 f4       	brne	.+12     	; 0x7d0 <fputc+0x48>
 7c4:	8e 81       	ldd	r24, Y+6	; 0x06
 7c6:	9f 81       	ldd	r25, Y+7	; 0x07
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	9f 83       	std	Y+7, r25	; 0x07
 7cc:	8e 83       	std	Y+6, r24	; 0x06
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <fputc+0x4c>
 7d0:	0f ef       	ldi	r16, 0xFF	; 255
 7d2:	1f ef       	ldi	r17, 0xFF	; 255
 7d4:	c8 01       	movw	r24, r16
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	08 95       	ret

000007e0 <__ultoa_invert>:
 7e0:	fa 01       	movw	r30, r20
 7e2:	aa 27       	eor	r26, r26
 7e4:	28 30       	cpi	r18, 0x08	; 8
 7e6:	51 f1       	breq	.+84     	; 0x83c <__ultoa_invert+0x5c>
 7e8:	20 31       	cpi	r18, 0x10	; 16
 7ea:	81 f1       	breq	.+96     	; 0x84c <__ultoa_invert+0x6c>
 7ec:	e8 94       	clt
 7ee:	6f 93       	push	r22
 7f0:	6e 7f       	andi	r22, 0xFE	; 254
 7f2:	6e 5f       	subi	r22, 0xFE	; 254
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	af 4f       	sbci	r26, 0xFF	; 255
 7fc:	b1 e0       	ldi	r27, 0x01	; 1
 7fe:	3e d0       	rcall	.+124    	; 0x87c <__stack+0x1d>
 800:	b4 e0       	ldi	r27, 0x04	; 4
 802:	3c d0       	rcall	.+120    	; 0x87c <__stack+0x1d>
 804:	67 0f       	add	r22, r23
 806:	78 1f       	adc	r23, r24
 808:	89 1f       	adc	r24, r25
 80a:	9a 1f       	adc	r25, r26
 80c:	a1 1d       	adc	r26, r1
 80e:	68 0f       	add	r22, r24
 810:	79 1f       	adc	r23, r25
 812:	8a 1f       	adc	r24, r26
 814:	91 1d       	adc	r25, r1
 816:	a1 1d       	adc	r26, r1
 818:	6a 0f       	add	r22, r26
 81a:	71 1d       	adc	r23, r1
 81c:	81 1d       	adc	r24, r1
 81e:	91 1d       	adc	r25, r1
 820:	a1 1d       	adc	r26, r1
 822:	20 d0       	rcall	.+64     	; 0x864 <__stack+0x5>
 824:	09 f4       	brne	.+2      	; 0x828 <__ultoa_invert+0x48>
 826:	68 94       	set
 828:	3f 91       	pop	r19
 82a:	2a e0       	ldi	r18, 0x0A	; 10
 82c:	26 9f       	mul	r18, r22
 82e:	11 24       	eor	r1, r1
 830:	30 19       	sub	r19, r0
 832:	30 5d       	subi	r19, 0xD0	; 208
 834:	31 93       	st	Z+, r19
 836:	de f6       	brtc	.-74     	; 0x7ee <__ultoa_invert+0xe>
 838:	cf 01       	movw	r24, r30
 83a:	08 95       	ret
 83c:	46 2f       	mov	r20, r22
 83e:	47 70       	andi	r20, 0x07	; 7
 840:	40 5d       	subi	r20, 0xD0	; 208
 842:	41 93       	st	Z+, r20
 844:	b3 e0       	ldi	r27, 0x03	; 3
 846:	0f d0       	rcall	.+30     	; 0x866 <__stack+0x7>
 848:	c9 f7       	brne	.-14     	; 0x83c <__ultoa_invert+0x5c>
 84a:	f6 cf       	rjmp	.-20     	; 0x838 <__ultoa_invert+0x58>
 84c:	46 2f       	mov	r20, r22
 84e:	4f 70       	andi	r20, 0x0F	; 15
 850:	40 5d       	subi	r20, 0xD0	; 208
 852:	4a 33       	cpi	r20, 0x3A	; 58
 854:	18 f0       	brcs	.+6      	; 0x85c <__ultoa_invert+0x7c>
 856:	49 5d       	subi	r20, 0xD9	; 217
 858:	31 fd       	sbrc	r19, 1
 85a:	40 52       	subi	r20, 0x20	; 32
 85c:	41 93       	st	Z+, r20
 85e:	02 d0       	rcall	.+4      	; 0x864 <__stack+0x5>
 860:	a9 f7       	brne	.-22     	; 0x84c <__ultoa_invert+0x6c>
 862:	ea cf       	rjmp	.-44     	; 0x838 <__ultoa_invert+0x58>
 864:	b4 e0       	ldi	r27, 0x04	; 4
 866:	a6 95       	lsr	r26
 868:	97 95       	ror	r25
 86a:	87 95       	ror	r24
 86c:	77 95       	ror	r23
 86e:	67 95       	ror	r22
 870:	ba 95       	dec	r27
 872:	c9 f7       	brne	.-14     	; 0x866 <__stack+0x7>
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	61 05       	cpc	r22, r1
 878:	71 05       	cpc	r23, r1
 87a:	08 95       	ret
 87c:	9b 01       	movw	r18, r22
 87e:	ac 01       	movw	r20, r24
 880:	0a 2e       	mov	r0, r26
 882:	06 94       	lsr	r0
 884:	57 95       	ror	r21
 886:	47 95       	ror	r20
 888:	37 95       	ror	r19
 88a:	27 95       	ror	r18
 88c:	ba 95       	dec	r27
 88e:	c9 f7       	brne	.-14     	; 0x882 <__stack+0x23>
 890:	62 0f       	add	r22, r18
 892:	73 1f       	adc	r23, r19
 894:	84 1f       	adc	r24, r20
 896:	95 1f       	adc	r25, r21
 898:	a0 1d       	adc	r26, r0
 89a:	08 95       	ret

0000089c <__prologue_saves__>:
 89c:	2f 92       	push	r2
 89e:	3f 92       	push	r3
 8a0:	4f 92       	push	r4
 8a2:	5f 92       	push	r5
 8a4:	6f 92       	push	r6
 8a6:	7f 92       	push	r7
 8a8:	8f 92       	push	r8
 8aa:	9f 92       	push	r9
 8ac:	af 92       	push	r10
 8ae:	bf 92       	push	r11
 8b0:	cf 92       	push	r12
 8b2:	df 92       	push	r13
 8b4:	ef 92       	push	r14
 8b6:	ff 92       	push	r15
 8b8:	0f 93       	push	r16
 8ba:	1f 93       	push	r17
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	ca 1b       	sub	r28, r26
 8c6:	db 0b       	sbc	r29, r27
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	f8 94       	cli
 8cc:	de bf       	out	0x3e, r29	; 62
 8ce:	0f be       	out	0x3f, r0	; 63
 8d0:	cd bf       	out	0x3d, r28	; 61
 8d2:	09 94       	ijmp

000008d4 <__epilogue_restores__>:
 8d4:	2a 88       	ldd	r2, Y+18	; 0x12
 8d6:	39 88       	ldd	r3, Y+17	; 0x11
 8d8:	48 88       	ldd	r4, Y+16	; 0x10
 8da:	5f 84       	ldd	r5, Y+15	; 0x0f
 8dc:	6e 84       	ldd	r6, Y+14	; 0x0e
 8de:	7d 84       	ldd	r7, Y+13	; 0x0d
 8e0:	8c 84       	ldd	r8, Y+12	; 0x0c
 8e2:	9b 84       	ldd	r9, Y+11	; 0x0b
 8e4:	aa 84       	ldd	r10, Y+10	; 0x0a
 8e6:	b9 84       	ldd	r11, Y+9	; 0x09
 8e8:	c8 84       	ldd	r12, Y+8	; 0x08
 8ea:	df 80       	ldd	r13, Y+7	; 0x07
 8ec:	ee 80       	ldd	r14, Y+6	; 0x06
 8ee:	fd 80       	ldd	r15, Y+5	; 0x05
 8f0:	0c 81       	ldd	r16, Y+4	; 0x04
 8f2:	1b 81       	ldd	r17, Y+3	; 0x03
 8f4:	aa 81       	ldd	r26, Y+2	; 0x02
 8f6:	b9 81       	ldd	r27, Y+1	; 0x01
 8f8:	ce 0f       	add	r28, r30
 8fa:	d1 1d       	adc	r29, r1
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	ed 01       	movw	r28, r26
 908:	08 95       	ret

0000090a <_exit>:
 90a:	f8 94       	cli

0000090c <__stop_program>:
 90c:	ff cf       	rjmp	.-2      	; 0x90c <__stop_program>
