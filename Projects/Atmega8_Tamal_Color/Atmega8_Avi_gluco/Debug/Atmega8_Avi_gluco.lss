
Atmega8_Avi_gluco.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000030  00000000  00000000  000008e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000029b  00000000  00000000  00000915  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000173  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00000d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000134  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	6a d0       	rcall	.+212    	; 0x108 <main>
  34:	73 c0       	rjmp	.+230    	; 0x11c <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <ReadADC>:
#define  PORT_OFF(port,pin)  port &=  ~(1<<pin)

uint16_t ReadADC(uint8_t ch)
{
	ch=ch&0b00000111;
	   ADMUX|=ch;
  38:	97 b1       	in	r25, 0x07	; 7
#define  PORT_ON(port,pin) port |= (1<<pin)
#define  PORT_OFF(port,pin)  port &=  ~(1<<pin)

uint16_t ReadADC(uint8_t ch)
{
	ch=ch&0b00000111;
  3a:	87 70       	andi	r24, 0x07	; 7
	   ADMUX|=ch;
  3c:	89 2b       	or	r24, r25
  3e:	87 b9       	out	0x07, r24	; 7
	//Start Single conversion
	   ADCSRA|=(1<<ADSC);
  40:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  42:	34 9b       	sbis	0x06, 4	; 6
  44:	fe cf       	rjmp	.-4      	; 0x42 <__SREG__+0x3>
	ADCSRA|=(1<<ADIF);
  46:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  48:	24 b1       	in	r18, 0x04	; 4
  4a:	35 b1       	in	r19, 0x05	; 5
}
  4c:	c9 01       	movw	r24, r18
  4e:	08 95       	ret

00000050 <calc>:
		
void calc()
{
  50:	0f 93       	push	r16
  52:	1f 93       	push	r17
	unsigned int red_val, green_val, blue_val;
	//calc red
	PORTB = 0x01;
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	0f ef       	ldi	r16, 0xFF	; 255
  5a:	11 e1       	ldi	r17, 0x11	; 17
  5c:	2a e7       	ldi	r18, 0x7A	; 122
  5e:	01 50       	subi	r16, 0x01	; 1
  60:	10 40       	sbci	r17, 0x00	; 0
  62:	20 40       	sbci	r18, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <calc+0xe>
  66:	00 c0       	rjmp	.+0      	; 0x68 <calc+0x18>
  68:	00 00       	nop
	_delay_ms(5000);
	ADCSRA  |= (1<<ADSC);	// Start conversion
  6a:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
  6c:	34 9b       	sbis	0x06, 4	; 6
  6e:	fe cf       	rjmp	.-4      	; 0x6c <calc+0x1c>
	ADCSRA|=(1<<ADIF);
  70:	34 9a       	sbi	0x06, 4	; 6
	// wait until conversion  completes; ADSC=0 means Complete
  	red_val = ADCW;	//Store ADC result
  72:	84 b1       	in	r24, 0x04	; 4
  74:	95 b1       	in	r25, 0x05	; 5
	
	//calc green
	PORTB = 0x02;
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	28 bb       	out	0x18, r18	; 24
  7a:	2f ef       	ldi	r18, 0xFF	; 255
  7c:	31 e1       	ldi	r19, 0x11	; 17
  7e:	4a e7       	ldi	r20, 0x7A	; 122
  80:	21 50       	subi	r18, 0x01	; 1
  82:	30 40       	sbci	r19, 0x00	; 0
  84:	40 40       	sbci	r20, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <calc+0x30>
  88:	00 c0       	rjmp	.+0      	; 0x8a <calc+0x3a>
  8a:	00 00       	nop
	_delay_ms(5000);
	ADCSRA  |= (1<<ADSC);	// Start conversion
  8c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <calc+0x3e>
	ADCSRA|=(1<<ADIF);
  92:	34 9a       	sbi	0x06, 4	; 6
	// wait until conversion  completes; ADSC=0 means Complete
  	green_val = ADCW;	//Store ADC result
  94:	44 b1       	in	r20, 0x04	; 4
  96:	55 b1       	in	r21, 0x05	; 5
	
	//calc blue
	PORTB = 0x04;
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	28 bb       	out	0x18, r18	; 24
  9c:	0f ef       	ldi	r16, 0xFF	; 255
  9e:	11 e1       	ldi	r17, 0x11	; 17
  a0:	2a e7       	ldi	r18, 0x7A	; 122
  a2:	01 50       	subi	r16, 0x01	; 1
  a4:	10 40       	sbci	r17, 0x00	; 0
  a6:	20 40       	sbci	r18, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <calc+0x52>
  aa:	00 c0       	rjmp	.+0      	; 0xac <calc+0x5c>
  ac:	00 00       	nop
	_delay_ms(5000);
	ADCSRA  |= (1<<ADSC);	// Start conversion
  ae:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA & (1<<ADIF)));
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <calc+0x60>
	ADCSRA|=(1<<ADIF);
  b4:	34 9a       	sbi	0x06, 4	; 6
	// wait until conversion  completes; ADSC=0 means Complete
  	blue_val = ADCW;	//Store ADC result
  b6:	24 b1       	in	r18, 0x04	; 4
  b8:	35 b1       	in	r19, 0x05	; 5
	
	
	PORTB = 0x00;
  ba:	18 ba       	out	0x18, r1	; 24
	if((red_val > blue_val) && (red_val > green_val))
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	18 f4       	brcc	.+6      	; 0xc8 <calc+0x78>
  c2:	48 17       	cp	r20, r24
  c4:	59 07       	cpc	r21, r25
  c6:	d0 f0       	brcs	.+52     	; 0xfc <calc+0xac>
	{
		PORTB = 0x08;
	}
	else if ((blue_val > red_val) && (blue_val > green_val))
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	18 f4       	brcc	.+6      	; 0xd4 <calc+0x84>
  ce:	42 17       	cp	r20, r18
  d0:	53 07       	cpc	r21, r19
  d2:	b8 f0       	brcs	.+46     	; 0x102 <calc+0xb2>
	{
		PORTB = 0x10;
	}
	else if (green_val > red_val && green_val > blue_val)
  d4:	84 17       	cp	r24, r20
  d6:	95 07       	cpc	r25, r21
  d8:	28 f4       	brcc	.+10     	; 0xe4 <calc+0x94>
  da:	24 17       	cp	r18, r20
  dc:	35 07       	cpc	r19, r21
  de:	10 f4       	brcc	.+4      	; 0xe4 <calc+0x94>
	{
		PORTB = 0x20;
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	31 e1       	ldi	r19, 0x11	; 17
  e8:	4a e7       	ldi	r20, 0x7A	; 122
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	30 40       	sbci	r19, 0x00	; 0
  ee:	40 40       	sbci	r20, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <calc+0x9a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <calc+0xa4>
  f4:	00 00       	nop
	}
	_delay_ms(5000);
}
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret
	
	
	PORTB = 0x00;
	if((red_val > blue_val) && (red_val > green_val))
	{
		PORTB = 0x08;
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	88 bb       	out	0x18, r24	; 24
 100:	f1 cf       	rjmp	.-30     	; 0xe4 <calc+0x94>
	}
	else if ((blue_val > red_val) && (blue_val > green_val))
	{
		PORTB = 0x10;
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	88 bb       	out	0x18, r24	; 24
 106:	ee cf       	rjmp	.-36     	; 0xe4 <calc+0x94>

00000108 <main>:
	_delay_ms(5000);
}
int  main(void)
{
	unsigned  char color;	// Variable to hold ADC  result
	DDRB=0xFF;	// Set Port B.0, 1, 2 for LED output
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	87 bb       	out	0x17, r24	; 23
	PORTB  = 0x00;	// Clear Portd pins
 10c:	18 ba       	out	0x18, r1	; 24
 	ADCSRA  = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1);
 10e:	86 e8       	ldi	r24, 0x86	; 134
 110:	86 b9       	out	0x06, r24	; 6
	// Set ADCSRA Register with division factor 64

	ADMUX=0x01;	//Binary equivalent of 0001
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	87 b9       	out	0x07, r24	; 7
			
	while (1)	//Forever since it is in  single conversion mode
		{
  			calc();
 116:	9c df       	rcall	.-200    	; 0x50 <calc>
 118:	9b df       	rcall	.-202    	; 0x50 <calc>
 11a:	fd cf       	rjmp	.-6      	; 0x116 <main+0xe>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
