
Atmega8_AT45DB011B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  000009b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000127  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000634  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000306  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000640  00000000  00000000  0000145a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a2  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000049  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000021fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	30 d0       	rcall	.+96     	; 0x94 <main>
  34:	ed c0       	rjmp	.+474    	; 0x210 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <SPI_master_init>:
#define MISO 4
#define SCK 5

void SPI_master_init()
{
	DDRB = (1 << MOSI)|(0 << MISO)|(1 << SCK)|(1 << SS);
  38:	8c e2       	ldi	r24, 0x2C	; 44
  3a:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR0); // Set as master and clock fosc/16 & polling
  3c:	8d e5       	ldi	r24, 0x5D	; 93
  3e:	8d b9       	out	0x0d, r24	; 13
}
  40:	08 95       	ret

00000042 <spi_TxRx>:

uint8_t spi_TxRx(uint8_t val)
{
	SPDR = val;
  42:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  44:	77 9b       	sbis	0x0e, 7	; 14
  46:	fe cf       	rjmp	.-4      	; 0x44 <spi_TxRx+0x2>
	return SPDR;
  48:	8f b1       	in	r24, 0x0f	; 15
}
  4a:	08 95       	ret

0000004c <main_page_read>:

void main_page_read()
{
	PORTB &= !(1<<SS);
  4c:	88 b3       	in	r24, 0x18	; 24
  4e:	18 ba       	out	0x18, r1	; 24
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR0); // Set as master and clock fosc/16 & polling
}

uint8_t spi_TxRx(uint8_t val)
{
	SPDR = val;
  50:	82 e5       	ldi	r24, 0x52	; 82
  52:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  54:	77 9b       	sbis	0x0e, 7	; 14
  56:	fe cf       	rjmp	.-4      	; 0x54 <main_page_read+0x8>
	return SPDR;
  58:	8f b1       	in	r24, 0x0f	; 15

void main_page_read()
{
	PORTB &= !(1<<SS);
	spi_TxRx(0x52);
	PORTB |= (1<<SS);
  5a:	c2 9a       	sbi	0x18, 2	; 24
}
  5c:	08 95       	ret

0000005e <buffer_read>:

void buffer_read()
{
	PORTB &= !(1<<SS);
  5e:	88 b3       	in	r24, 0x18	; 24
  60:	18 ba       	out	0x18, r1	; 24
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR0); // Set as master and clock fosc/16 & polling
}

uint8_t spi_TxRx(uint8_t val)
{
	SPDR = val;
  62:	84 e5       	ldi	r24, 0x54	; 84
  64:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  66:	77 9b       	sbis	0x0e, 7	; 14
  68:	fe cf       	rjmp	.-4      	; 0x66 <buffer_read+0x8>
	return SPDR;
  6a:	8f b1       	in	r24, 0x0f	; 15

void buffer_read()
{
	PORTB &= !(1<<SS);
	spi_TxRx(0x54);
	PORTB |= (1<<SS);
  6c:	c2 9a       	sbi	0x18, 2	; 24
}
  6e:	08 95       	ret

00000070 <memPage2buffer>:

void memPage2buffer()
{
	PORTB &= !(1<<SS);
  70:	88 b3       	in	r24, 0x18	; 24
  72:	18 ba       	out	0x18, r1	; 24
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR0); // Set as master and clock fosc/16 & polling
}

uint8_t spi_TxRx(uint8_t val)
{
	SPDR = val;
  74:	83 e5       	ldi	r24, 0x53	; 83
  76:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  78:	77 9b       	sbis	0x0e, 7	; 14
  7a:	fe cf       	rjmp	.-4      	; 0x78 <memPage2buffer+0x8>
	return SPDR;
  7c:	8f b1       	in	r24, 0x0f	; 15

void memPage2buffer()
{
	PORTB &= !(1<<SS);
	spi_TxRx(0x53);
	PORTB |= (1<<SS);
  7e:	c2 9a       	sbi	0x18, 2	; 24
}
  80:	08 95       	ret

00000082 <memPage2bufferComp>:

void memPage2bufferComp()
{
	PORTB &= !(1<<SS);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	18 ba       	out	0x18, r1	; 24
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA)|(1<<SPR0); // Set as master and clock fosc/16 & polling
}

uint8_t spi_TxRx(uint8_t val)
{
	SPDR = val;
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  8a:	77 9b       	sbis	0x0e, 7	; 14
  8c:	fe cf       	rjmp	.-4      	; 0x8a <memPage2bufferComp+0x8>
	return SPDR;
  8e:	8f b1       	in	r24, 0x0f	; 15

void memPage2bufferComp()
{
	PORTB &= !(1<<SS);
	spi_TxRx(0x60);
	PORTB |= (1<<SS);
  90:	c2 9a       	sbi	0x18, 2	; 24
}
  92:	08 95       	ret

00000094 <main>:

int main(void)
{
  94:	ff cf       	rjmp	.-2      	; 0x94 <main>

00000096 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  96:	66 23       	and	r22, r22
  98:	c1 f4       	brne	.+48     	; 0xca <lcd_write+0x34>
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  9a:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
  9c:	95 98       	cbi	0x12, 5	; 18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  9e:	91 b3       	in	r25, 0x11	; 17
  a0:	9f 60       	ori	r25, 0x0F	; 15
  a2:	91 bb       	out	0x11, r25	; 17

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  a8:	28 2f       	mov	r18, r24
  aa:	22 95       	swap	r18
  ac:	2f 70       	andi	r18, 0x0F	; 15
  ae:	29 2b       	or	r18, r25
  b0:	22 bb       	out	0x12, r18	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  b2:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_write+0x20>
    lcd_e_low();
  b6:	96 98       	cbi	0x12, 6	; 18
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	89 2b       	or	r24, r25
  bc:	82 bb       	out	0x12, r24	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  be:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_write+0x2c>
    lcd_e_low();
  c2:	96 98       	cbi	0x12, 6	; 18
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
  c4:	9f 60       	ori	r25, 0x0F	; 15
  c6:	92 bb       	out	0x12, r25	; 18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
  c8:	08 95       	ret
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
  ca:	94 9a       	sbi	0x12, 4	; 18
  cc:	e7 cf       	rjmp	.-50     	; 0x9c <lcd_write+0x6>

000000ce <lcd_read.clone.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  ce:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
  d0:	95 9a       	sbi	0x12, 5	; 18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
  d2:	81 b3       	in	r24, 0x11	; 17
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	81 bb       	out	0x11, r24	; 17
        
        lcd_e_high();
  d8:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_read.clone.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  dc:	90 b3       	in	r25, 0x10	; 16
        lcd_e_low();
  de:	96 98       	cbi	0x12, 6	; 18
        
        lcd_e_delay();                       /* Enable 500ns low       */
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <lcd_read.clone.0+0x14>
        
        lcd_e_high();
  e2:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_read.clone.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
  e6:	80 b3       	in	r24, 0x10	; 16
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  e8:	92 95       	swap	r25
  ea:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
  ec:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
  ee:	96 98       	cbi	0x12, 6	; 18
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
  f0:	89 2b       	or	r24, r25
  f2:	08 95       	ret

000000f4 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
  f4:	ec df       	rcall	.-40     	; 0xce <lcd_read.clone.0>
  f6:	87 fd       	sbrc	r24, 7
  f8:	fd cf       	rjmp	.-6      	; 0xf4 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 102:	e5 df       	rcall	.-54     	; 0xce <lcd_read.clone.0>
    
}/* lcd_waitbusy */
 104:	08 95       	ret

00000106 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 106:	1f 93       	push	r17
 108:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 10a:	f4 df       	rcall	.-24     	; 0xf4 <lcd_waitbusy>
    lcd_write(cmd,0);
 10c:	81 2f       	mov	r24, r17
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	c2 df       	rcall	.-124    	; 0x96 <lcd_write>
}
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 116:	1f 93       	push	r17
 118:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 11a:	ec df       	rcall	.-40     	; 0xf4 <lcd_waitbusy>
    lcd_write(data,1);
 11c:	81 2f       	mov	r24, r17
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	ba df       	rcall	.-140    	; 0x96 <lcd_write>
}
 122:	1f 91       	pop	r17
 124:	08 95       	ret

00000126 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 126:	66 23       	and	r22, r22
 128:	19 f0       	breq	.+6      	; 0x130 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 12a:	80 54       	subi	r24, 0x40	; 64
 12c:	ec df       	rcall	.-40     	; 0x106 <lcd_command>
 12e:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 130:	80 58       	subi	r24, 0x80	; 128
 132:	e9 df       	rcall	.-46     	; 0x106 <lcd_command>
 134:	08 95       	ret

00000136 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 136:	de df       	rcall	.-68     	; 0xf4 <lcd_waitbusy>
}
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	e3 df       	rcall	.-58     	; 0x106 <lcd_command>
}
 140:	08 95       	ret

00000142 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	e0 df       	rcall	.-64     	; 0x106 <lcd_command>
}
 146:	08 95       	ret

00000148 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 148:	1f 93       	push	r17
 14a:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 14c:	d3 df       	rcall	.-90     	; 0xf4 <lcd_waitbusy>
    if (c=='\n')
 14e:	1a 30       	cpi	r17, 0x0A	; 10
 150:	29 f0       	breq	.+10     	; 0x15c <lcd_putc+0x14>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 152:	81 2f       	mov	r24, r17
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	9f df       	rcall	.-194    	; 0x96 <lcd_write>
    }

}/* lcd_putc */
 158:	1f 91       	pop	r17
 15a:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 15c:	80 34       	cpi	r24, 0x40	; 64
 15e:	20 f0       	brcs	.+8      	; 0x168 <lcd_putc+0x20>
 160:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 162:	d1 df       	rcall	.-94     	; 0x106 <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 164:	1f 91       	pop	r17
 166:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 168:	80 ec       	ldi	r24, 0xC0	; 192
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 16a:	cd df       	rcall	.-102    	; 0x106 <lcd_command>
 16c:	fb cf       	rjmp	.-10     	; 0x164 <lcd_putc+0x1c>

0000016e <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 174:	88 81       	ld	r24, Y
 176:	88 23       	and	r24, r24
 178:	29 f0       	breq	.+10     	; 0x184 <lcd_puts+0x16>
 17a:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 17c:	e5 df       	rcall	.-54     	; 0x148 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 17e:	89 91       	ld	r24, Y+
 180:	88 23       	and	r24, r24
 182:	e1 f7       	brne	.-8      	; 0x17c <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 190:	fc 01       	movw	r30, r24
 192:	84 91       	lpm	r24, Z+
 194:	88 23       	and	r24, r24
 196:	39 f0       	breq	.+14     	; 0x1a6 <lcd_puts_p+0x1c>
 198:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 19a:	d6 df       	rcall	.-84     	; 0x148 <lcd_putc>
 19c:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	84 91       	lpm	r24, Z+
 1a2:	88 23       	and	r24, r24
 1a4:	d1 f7       	brne	.-12     	; 0x19a <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ac:	1f 93       	push	r17
 1ae:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1b0:	81 b3       	in	r24, 0x11	; 17
 1b2:	8f 67       	ori	r24, 0x7F	; 127
 1b4:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b6:	e0 e0       	ldi	r30, 0x00	; 0
 1b8:	fd e7       	ldi	r31, 0x7D	; 125
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1be:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1c0:	90 9a       	sbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1c2:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <lcd_init+0x1a>
    lcd_e_low();
 1c6:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c8:	e0 e0       	ldi	r30, 0x00	; 0
 1ca:	f7 e2       	ldi	r31, 0x27	; 39
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1d0:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_init+0x28>
    lcd_e_low();
 1d4:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d6:	20 e8       	ldi	r18, 0x80	; 128
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	f9 01       	movw	r30, r18
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1e0:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0x38>
    lcd_e_low();
 1e4:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e6:	f9 01       	movw	r30, r18
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1ec:	90 98       	cbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1ee:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x46>
    lcd_e_low();
 1f2:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1f4:	f9 01       	movw	r30, r18
 1f6:	31 97       	sbiw	r30, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	84 df       	rcall	.-248    	; 0x106 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1fe:	88 e0       	ldi	r24, 0x08	; 8
 200:	82 df       	rcall	.-252    	; 0x106 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 202:	9c df       	rcall	.-200    	; 0x13c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	7f df       	rcall	.-258    	; 0x106 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 208:	81 2f       	mov	r24, r17
 20a:	7d df       	rcall	.-262    	; 0x106 <lcd_command>

}/* lcd_init */
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
