
Atmega8_DS1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  0000061e  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000149  00000000  00000000  00000ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b22  00000000  00000000  00000ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000445  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bac  00000000  00000000  00001f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a1  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000624  00000000  00000000  00002f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000063  00000000  00000000  0000356d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e1       	ldi	r30, 0x1E	; 30
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3e       	cpi	r26, 0xE6	; 230
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	c2 d1       	rcall	.+900    	; 0x3ce <main>
  4a:	e7 c2       	rjmp	.+1486   	; 0x61a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <error>:
#include <util/delay.h>
#include <stdio.h>
#include "lcd.h"

void error(char *message)
{
  4e:	cf 93       	push	r28
  50:	df 93       	push	r29
  52:	ec 01       	movw	r28, r24
	lcd_clrscr();
  54:	78 d2       	rcall	.+1264   	; 0x546 <lcd_clrscr>
	lcd_puts(message);
  56:	ce 01       	movw	r24, r28
  58:	8f d2       	rcall	.+1310   	; 0x578 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	8f ef       	ldi	r24, 0xFF	; 255
  5c:	94 e3       	ldi	r25, 0x34	; 52
  5e:	ac e0       	ldi	r26, 0x0C	; 12
  60:	81 50       	subi	r24, 0x01	; 1
  62:	90 40       	sbci	r25, 0x00	; 0
  64:	a0 40       	sbci	r26, 0x00	; 0
  66:	e1 f7       	brne	.-8      	; 0x60 <error+0x12>
  68:	00 c0       	rjmp	.+0      	; 0x6a <error+0x1c>
  6a:	00 00       	nop
	_delay_ms(500);
}
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <i2c_init>:

void i2c_init()
{
	TWSR = 0x00;
  72:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x47; //Set SCL frequency ti 50KHz for XTAL = 8MHz
  74:	87 e4       	ldi	r24, 0x47	; 71
  76:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);
  78:	84 e0       	ldi	r24, 0x04	; 4
  7a:	86 bf       	out	0x36, r24	; 54
}
  7c:	08 95       	ret

0000007e <i2c_start>:

void i2c_start()
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  7e:	84 ea       	ldi	r24, 0xA4	; 164
  80:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
  82:	06 b6       	in	r0, 0x36	; 54
  84:	07 fe       	sbrs	r0, 7
  86:	fd cf       	rjmp	.-6      	; 0x82 <i2c_start+0x4>
	if (((TWSR & 0xF8) != 0x08) && ((TWSR & 0xF8) != 0x10))		/*Check TWSR for successful start or repeated start*/
  88:	81 b1       	in	r24, 0x01	; 1
  8a:	88 7f       	andi	r24, 0xF8	; 248
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	39 f0       	breq	.+14     	; 0x9e <i2c_start+0x20>
  90:	81 b1       	in	r24, 0x01	; 1
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	80 31       	cpi	r24, 0x10	; 16
  96:	19 f0       	breq	.+6      	; 0x9e <i2c_start+0x20>
		error("Error while start");
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	d8 df       	rcall	.-80     	; 0x4e <error>
  9e:	08 95       	ret

000000a0 <i2c_stop>:
}

void i2c_stop()
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  a0:	84 e9       	ldi	r24, 0x94	; 148
  a2:	86 bf       	out	0x36, r24	; 54
  a4:	8f e1       	ldi	r24, 0x1F	; 31
  a6:	9e e4       	ldi	r25, 0x4E	; 78
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <i2c_stop+0x8>
  ac:	00 c0       	rjmp	.+0      	; 0xae <i2c_stop+0xe>
  ae:	00 00       	nop
	_delay_ms(10);
}
  b0:	08 95       	ret

000000b2 <i2c_write>:

void i2c_write(uint8_t data)
{
	TWDR = data;
  b2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
  b8:	06 b6       	in	r0, 0x36	; 54
  ba:	07 fe       	sbrs	r0, 7
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <i2c_write+0x6>
}
  be:	08 95       	ret

000000c0 <i2c_read>:

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
  c0:	88 23       	and	r24, r24
  c2:	39 f0       	breq	.+14     	; 0xd2 <i2c_read+0x12>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  c4:	84 ec       	ldi	r24, 0xC4	; 196
  c6:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
  c8:	06 b6       	in	r0, 0x36	; 54
  ca:	07 fe       	sbrs	r0, 7
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <i2c_read+0x8>
	return TWDR;
  ce:	83 b1       	in	r24, 0x03	; 3
}
  d0:	08 95       	ret
uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
  d2:	84 e8       	ldi	r24, 0x84	; 132
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	f8 cf       	rjmp	.-16     	; 0xc8 <i2c_read+0x8>

000000d8 <RTC_init>:
	_delay_ms(500);
}

void i2c_init()
{
	TWSR = 0x00;
  d8:	11 b8       	out	0x01, r1	; 1
	TWBR = 0x47; //Set SCL frequency ti 50KHz for XTAL = 8MHz
  da:	87 e4       	ldi	r24, 0x47	; 71
  dc:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	86 bf       	out	0x36, r24	; 54
}

void RTC_init()
{
	i2c_init();
	i2c_start();
  e2:	cd df       	rcall	.-102    	; 0x7e <i2c_start>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
  e4:	80 ed       	ldi	r24, 0xD0	; 208
  e6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  e8:	84 e8       	ldi	r24, 0x84	; 132
  ea:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
  ec:	06 b6       	in	r0, 0x36	; 54
  ee:	07 fe       	sbrs	r0, 7
  f0:	fd cf       	rjmp	.-6      	; 0xec <RTC_init+0x14>
void RTC_init()
{
	i2c_init();
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18) /*Check TWSR for successful SLA+W status*/
  f2:	81 b1       	in	r24, 0x01	; 1
  f4:	88 7f       	andi	r24, 0xF8	; 248
  f6:	88 31       	cpi	r24, 0x18	; 24
  f8:	19 f0       	breq	.+6      	; 0x100 <RTC_init+0x28>
		error("Error while SLA+W write");
  fa:	82 e7       	ldi	r24, 0x72	; 114
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a7 df       	rcall	.-178    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 108:	06 b6       	in	r0, 0x36	; 54
 10a:	07 fe       	sbrs	r0, 7
 10c:	fd cf       	rjmp	.-6      	; 0x108 <RTC_init+0x30>
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18) /*Check TWSR for successful SLA+W status*/
		error("Error while SLA+W write");
	i2c_write(0x07); /* Set register pointer to address 0x07 (control register) */
	if ((TWSR & 0xF8) != 0x28) /*Check TWSR for successful Data/Register Address transmission status*/
 10e:	81 b1       	in	r24, 0x01	; 1
 110:	88 7f       	andi	r24, 0xF8	; 248
 112:	88 32       	cpi	r24, 0x28	; 40
 114:	19 f0       	breq	.+6      	; 0x11c <RTC_init+0x44>
		error("Error while Data write");
 116:	8a e8       	ldi	r24, 0x8A	; 138
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	99 df       	rcall	.-206    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 11c:	13 b8       	out	0x03, r1	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 122:	06 b6       	in	r0, 0x36	; 54
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <RTC_init+0x4a>
		error("Error while SLA+W write");
	i2c_write(0x07); /* Set register pointer to address 0x07 (control register) */
	if ((TWSR & 0xF8) != 0x28) /*Check TWSR for successful Data/Register Address transmission status*/
		error("Error while Data write");
	i2c_write(0x00);
	if ((TWSR & 0xF8) != 0x28) /*Check TWSR for successful Data transmission status*/
 128:	81 b1       	in	r24, 0x01	; 1
 12a:	88 7f       	andi	r24, 0xF8	; 248
 12c:	88 32       	cpi	r24, 0x28	; 40
 12e:	19 f0       	breq	.+6      	; 0x136 <RTC_init+0x5e>
		error("Error while Data write");
 130:	8a e8       	ldi	r24, 0x8A	; 138
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	8c df       	rcall	.-232    	; 0x4e <error>
	i2c_stop();
 136:	b4 df       	rcall	.-152    	; 0xa0 <i2c_stop>
}
 138:	08 95       	ret

0000013a <RTC_SetTimeDate>:

void RTC_SetTimeDate(uint8_t s, uint8_t m, uint8_t h, uint8_t day, uint8_t date,  uint8_t month, uint8_t year)
{
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	18 2f       	mov	r17, r24
 14a:	f6 2e       	mov	r15, r22
 14c:	d4 2e       	mov	r13, r20
 14e:	b2 2e       	mov	r11, r18
	i2c_start();
 150:	96 df       	rcall	.-212    	; 0x7e <i2c_start>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 156:	84 e8       	ldi	r24, 0x84	; 132
 158:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 15a:	06 b6       	in	r0, 0x36	; 54
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <RTC_SetTimeDate+0x20>

void RTC_SetTimeDate(uint8_t s, uint8_t m, uint8_t h, uint8_t day, uint8_t date,  uint8_t month, uint8_t year)
{
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18)
 160:	81 b1       	in	r24, 0x01	; 1
 162:	88 7f       	andi	r24, 0xF8	; 248
 164:	88 31       	cpi	r24, 0x18	; 24
 166:	19 f0       	breq	.+6      	; 0x16e <RTC_SetTimeDate+0x34>
		error("Error while SLA+W write");
 168:	82 e7       	ldi	r24, 0x72	; 114
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	70 df       	rcall	.-288    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 16e:	13 b8       	out	0x03, r1	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 170:	84 e8       	ldi	r24, 0x84	; 132
 172:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 174:	06 b6       	in	r0, 0x36	; 54
 176:	07 fe       	sbrs	r0, 7
 178:	fd cf       	rjmp	.-6      	; 0x174 <RTC_SetTimeDate+0x3a>
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18)
		error("Error while SLA+W write");
	i2c_write(0x00); /* Set register pointer to address 0x00 */
	if ((TWSR & 0xF8) != 0x28)
 17a:	81 b1       	in	r24, 0x01	; 1
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	88 32       	cpi	r24, 0x28	; 40
 180:	19 f0       	breq	.+6      	; 0x188 <RTC_SetTimeDate+0x4e>
		error("Error while Data write");
 182:	8a e8       	ldi	r24, 0x8A	; 138
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	63 df       	rcall	.-314    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 188:	13 b9       	out	0x03, r17	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 18a:	84 e8       	ldi	r24, 0x84	; 132
 18c:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 18e:	06 b6       	in	r0, 0x36	; 54
 190:	07 fe       	sbrs	r0, 7
 192:	fd cf       	rjmp	.-6      	; 0x18e <RTC_SetTimeDate+0x54>
		error("Error while SLA+W write");
	i2c_write(0x00); /* Set register pointer to address 0x00 */
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(s);
	if ((TWSR & 0xF8) != 0x28)
 194:	81 b1       	in	r24, 0x01	; 1
 196:	88 7f       	andi	r24, 0xF8	; 248
 198:	88 32       	cpi	r24, 0x28	; 40
 19a:	19 f0       	breq	.+6      	; 0x1a2 <RTC_SetTimeDate+0x68>
		error("Error while Data write");
 19c:	8a e8       	ldi	r24, 0x8A	; 138
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	56 df       	rcall	.-340    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 1a2:	f3 b8       	out	0x03, r15	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1a4:	84 e8       	ldi	r24, 0x84	; 132
 1a6:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 1a8:	06 b6       	in	r0, 0x36	; 54
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <RTC_SetTimeDate+0x6e>
		error("Error while Data write");
	i2c_write(s);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(m);
	if ((TWSR & 0xF8) != 0x28)
 1ae:	81 b1       	in	r24, 0x01	; 1
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 32       	cpi	r24, 0x28	; 40
 1b4:	19 f0       	breq	.+6      	; 0x1bc <RTC_SetTimeDate+0x82>
		error("Error while Data write");
 1b6:	8a e8       	ldi	r24, 0x8A	; 138
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	49 df       	rcall	.-366    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 1bc:	d3 b8       	out	0x03, r13	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1be:	84 e8       	ldi	r24, 0x84	; 132
 1c0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 1c2:	06 b6       	in	r0, 0x36	; 54
 1c4:	07 fe       	sbrs	r0, 7
 1c6:	fd cf       	rjmp	.-6      	; 0x1c2 <RTC_SetTimeDate+0x88>
		error("Error while Data write");
	i2c_write(m);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(h);
	if ((TWSR & 0xF8) != 0x28)
 1c8:	81 b1       	in	r24, 0x01	; 1
 1ca:	88 7f       	andi	r24, 0xF8	; 248
 1cc:	88 32       	cpi	r24, 0x28	; 40
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <RTC_SetTimeDate+0x9c>
		error("Error while Data write");
 1d0:	8a e8       	ldi	r24, 0x8A	; 138
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	3c df       	rcall	.-392    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 1d6:	b3 b8       	out	0x03, r11	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1d8:	84 e8       	ldi	r24, 0x84	; 132
 1da:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 1dc:	06 b6       	in	r0, 0x36	; 54
 1de:	07 fe       	sbrs	r0, 7
 1e0:	fd cf       	rjmp	.-6      	; 0x1dc <RTC_SetTimeDate+0xa2>
		error("Error while Data write");
	i2c_write(h);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(day);
	if ((TWSR & 0xF8) != 0x28)
 1e2:	81 b1       	in	r24, 0x01	; 1
 1e4:	88 7f       	andi	r24, 0xF8	; 248
 1e6:	88 32       	cpi	r24, 0x28	; 40
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <RTC_SetTimeDate+0xb6>
		error("Error while Data write");
 1ea:	8a e8       	ldi	r24, 0x8A	; 138
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	2f df       	rcall	.-418    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 1f0:	03 b9       	out	0x03, r16	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 1f6:	06 b6       	in	r0, 0x36	; 54
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <RTC_SetTimeDate+0xbc>
		error("Error while Data write");
	i2c_write(day);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(date);
	if ((TWSR & 0xF8) != 0x28)
 1fc:	81 b1       	in	r24, 0x01	; 1
 1fe:	88 7f       	andi	r24, 0xF8	; 248
 200:	88 32       	cpi	r24, 0x28	; 40
 202:	19 f0       	breq	.+6      	; 0x20a <RTC_SetTimeDate+0xd0>
		error("Error while Data write");
 204:	8a e8       	ldi	r24, 0x8A	; 138
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	22 df       	rcall	.-444    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 20a:	e3 b8       	out	0x03, r14	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 20c:	84 e8       	ldi	r24, 0x84	; 132
 20e:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 210:	06 b6       	in	r0, 0x36	; 54
 212:	07 fe       	sbrs	r0, 7
 214:	fd cf       	rjmp	.-6      	; 0x210 <RTC_SetTimeDate+0xd6>
		error("Error while Data write");
	i2c_write(date);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(month);
	if ((TWSR & 0xF8) != 0x28)
 216:	81 b1       	in	r24, 0x01	; 1
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	88 32       	cpi	r24, 0x28	; 40
 21c:	19 f0       	breq	.+6      	; 0x224 <RTC_SetTimeDate+0xea>
		error("Error while Data write");
 21e:	8a e8       	ldi	r24, 0x8A	; 138
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	15 df       	rcall	.-470    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 224:	c3 b8       	out	0x03, r12	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 226:	84 e8       	ldi	r24, 0x84	; 132
 228:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 22a:	06 b6       	in	r0, 0x36	; 54
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <RTC_SetTimeDate+0xf0>
		error("Error while Data write");
	i2c_write(month);
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Data write");
	i2c_write(year);
	if ((TWSR & 0xF8) != 0x28)
 230:	81 b1       	in	r24, 0x01	; 1
 232:	88 7f       	andi	r24, 0xF8	; 248
 234:	88 32       	cpi	r24, 0x28	; 40
 236:	19 f0       	breq	.+6      	; 0x23e <RTC_SetTimeDate+0x104>
		error("Error while Data write");
 238:	8a e8       	ldi	r24, 0x8A	; 138
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	08 df       	rcall	.-496    	; 0x4e <error>
	i2c_stop();
 23e:	30 df       	rcall	.-416    	; 0xa0 <i2c_stop>
}
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	08 95       	ret

00000250 <RTC_GetTimeDate>:

void RTC_GetTimeDate(uint8_t *s, uint8_t *m, uint8_t *h, uint8_t *day, uint8_t *date,  uint8_t *month, uint8_t *year)
{
 250:	4f 92       	push	r4
 252:	5f 92       	push	r5
 254:	6f 92       	push	r6
 256:	7f 92       	push	r7
 258:	8f 92       	push	r8
 25a:	9f 92       	push	r9
 25c:	af 92       	push	r10
 25e:	bf 92       	push	r11
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	2c 01       	movw	r4, r24
 272:	3b 01       	movw	r6, r22
 274:	4a 01       	movw	r8, r20
 276:	59 01       	movw	r10, r18
 278:	e7 01       	movw	r28, r14
	i2c_start();
 27a:	01 df       	rcall	.-510    	; 0x7e <i2c_start>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 27c:	80 ed       	ldi	r24, 0xD0	; 208
 27e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 280:	84 e8       	ldi	r24, 0x84	; 132
 282:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 284:	06 b6       	in	r0, 0x36	; 54
 286:	07 fe       	sbrs	r0, 7
 288:	fd cf       	rjmp	.-6      	; 0x284 <RTC_GetTimeDate+0x34>

void RTC_GetTimeDate(uint8_t *s, uint8_t *m, uint8_t *h, uint8_t *day, uint8_t *date,  uint8_t *month, uint8_t *year)
{
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18)
 28a:	81 b1       	in	r24, 0x01	; 1
 28c:	88 7f       	andi	r24, 0xF8	; 248
 28e:	88 31       	cpi	r24, 0x18	; 24
 290:	19 f0       	breq	.+6      	; 0x298 <RTC_GetTimeDate+0x48>
		error("Error while SLA+W write");
 292:	82 e7       	ldi	r24, 0x72	; 114
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	db de       	rcall	.-586    	; 0x4e <error>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 298:	13 b8       	out	0x03, r1	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 29a:	84 e8       	ldi	r24, 0x84	; 132
 29c:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 29e:	06 b6       	in	r0, 0x36	; 54
 2a0:	07 fe       	sbrs	r0, 7
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <RTC_GetTimeDate+0x4e>
	i2c_start();
	i2c_write(0b11010000); /* Address 1101000(R/W bit) 0 for write */
	if ((TWSR & 0xF8) != 0x18)
		error("Error while SLA+W write");
	i2c_write(0x00); /* Set register pointer to address 0x00 */
	if ((TWSR & 0xF8) != 0x28)
 2a4:	81 b1       	in	r24, 0x01	; 1
 2a6:	88 7f       	andi	r24, 0xF8	; 248
 2a8:	88 32       	cpi	r24, 0x28	; 40
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <RTC_GetTimeDate+0x62>
		error("Error while Address write");
 2ac:	81 ea       	ldi	r24, 0xA1	; 161
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ce de       	rcall	.-612    	; 0x4e <error>
	i2c_start(); // Repeated Start
 2b2:	e5 de       	rcall	.-566    	; 0x7e <i2c_start>
	_delay_ms(10);
}

void i2c_write(uint8_t data)
{
	TWDR = data;
 2b4:	81 ed       	ldi	r24, 0xD1	; 209
 2b6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
 2b8:	84 e8       	ldi	r24, 0x84	; 132
 2ba:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 2bc:	06 b6       	in	r0, 0x36	; 54
 2be:	07 fe       	sbrs	r0, 7
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <RTC_GetTimeDate+0x6c>
	i2c_write(0x00); /* Set register pointer to address 0x00 */
	if ((TWSR & 0xF8) != 0x28)
		error("Error while Address write");
	i2c_start(); // Repeated Start
	i2c_write(0b11010001);
	if ((TWSR & 0xF8) != 0x40)
 2c2:	81 b1       	in	r24, 0x01	; 1
 2c4:	88 7f       	andi	r24, 0xF8	; 248
 2c6:	80 34       	cpi	r24, 0x40	; 64
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <RTC_GetTimeDate+0x80>
		error("Error in SLA+R write");
 2ca:	8b eb       	ldi	r24, 0xBB	; 187
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	bf de       	rcall	.-642    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 2d0:	84 ec       	ldi	r24, 0xC4	; 196
 2d2:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 2d4:	06 b6       	in	r0, 0x36	; 54
 2d6:	07 fe       	sbrs	r0, 7
 2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <RTC_GetTimeDate+0x84>
	return TWDR;
 2da:	83 b1       	in	r24, 0x03	; 3
		error("Error while Address write");
	i2c_start(); // Repeated Start
	i2c_write(0b11010001);
	if ((TWSR & 0xF8) != 0x40)
		error("Error in SLA+R write");
	*s=i2c_read(1);
 2dc:	f2 01       	movw	r30, r4
 2de:	80 83       	st	Z, r24
	if ((TWSR & 0xF8) != 0x50)
 2e0:	81 b1       	in	r24, 0x01	; 1
 2e2:	88 7f       	andi	r24, 0xF8	; 248
 2e4:	80 35       	cpi	r24, 0x50	; 80
 2e6:	19 f0       	breq	.+6      	; 0x2ee <RTC_GetTimeDate+0x9e>
		error("Error in Data recieve");
 2e8:	80 ed       	ldi	r24, 0xD0	; 208
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	b0 de       	rcall	.-672    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 2ee:	84 ec       	ldi	r24, 0xC4	; 196
 2f0:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 2f2:	06 b6       	in	r0, 0x36	; 54
 2f4:	07 fe       	sbrs	r0, 7
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <RTC_GetTimeDate+0xa2>
	return TWDR;
 2f8:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x40)
		error("Error in SLA+R write");
	*s=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*m=i2c_read(1);
 2fa:	f3 01       	movw	r30, r6
 2fc:	80 83       	st	Z, r24
	if ((TWSR & 0xF8) != 0x50)
 2fe:	81 b1       	in	r24, 0x01	; 1
 300:	88 7f       	andi	r24, 0xF8	; 248
 302:	80 35       	cpi	r24, 0x50	; 80
 304:	19 f0       	breq	.+6      	; 0x30c <RTC_GetTimeDate+0xbc>
		error("Error in Data recieve");
 306:	80 ed       	ldi	r24, 0xD0	; 208
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a1 de       	rcall	.-702    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 30c:	84 ec       	ldi	r24, 0xC4	; 196
 30e:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 310:	06 b6       	in	r0, 0x36	; 54
 312:	07 fe       	sbrs	r0, 7
 314:	fd cf       	rjmp	.-6      	; 0x310 <RTC_GetTimeDate+0xc0>
	return TWDR;
 316:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*m=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*h=i2c_read(1);
 318:	f4 01       	movw	r30, r8
 31a:	80 83       	st	Z, r24
	if ((TWSR & 0xF8) != 0x50)
 31c:	81 b1       	in	r24, 0x01	; 1
 31e:	88 7f       	andi	r24, 0xF8	; 248
 320:	80 35       	cpi	r24, 0x50	; 80
 322:	19 f0       	breq	.+6      	; 0x32a <RTC_GetTimeDate+0xda>
		error("Error in Data recieve");
 324:	80 ed       	ldi	r24, 0xD0	; 208
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	92 de       	rcall	.-732    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 32a:	84 ec       	ldi	r24, 0xC4	; 196
 32c:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 32e:	06 b6       	in	r0, 0x36	; 54
 330:	07 fe       	sbrs	r0, 7
 332:	fd cf       	rjmp	.-6      	; 0x32e <RTC_GetTimeDate+0xde>
	return TWDR;
 334:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*h=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*day=i2c_read(1);
 336:	f5 01       	movw	r30, r10
 338:	80 83       	st	Z, r24
	if ((TWSR & 0xF8) != 0x50)
 33a:	81 b1       	in	r24, 0x01	; 1
 33c:	88 7f       	andi	r24, 0xF8	; 248
 33e:	80 35       	cpi	r24, 0x50	; 80
 340:	19 f0       	breq	.+6      	; 0x348 <RTC_GetTimeDate+0xf8>
		error("Error in Data recieve");
 342:	80 ed       	ldi	r24, 0xD0	; 208
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	83 de       	rcall	.-762    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 348:	84 ec       	ldi	r24, 0xC4	; 196
 34a:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 34c:	06 b6       	in	r0, 0x36	; 54
 34e:	07 fe       	sbrs	r0, 7
 350:	fd cf       	rjmp	.-6      	; 0x34c <RTC_GetTimeDate+0xfc>
	return TWDR;
 352:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*day=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*date=i2c_read(1);
 354:	f8 01       	movw	r30, r16
 356:	80 83       	st	Z, r24
	if ((TWSR & 0xF8) != 0x50)
 358:	81 b1       	in	r24, 0x01	; 1
 35a:	88 7f       	andi	r24, 0xF8	; 248
 35c:	80 35       	cpi	r24, 0x50	; 80
 35e:	19 f0       	breq	.+6      	; 0x366 <RTC_GetTimeDate+0x116>
		error("Error in Data recieve");
 360:	80 ed       	ldi	r24, 0xD0	; 208
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	74 de       	rcall	.-792    	; 0x4e <error>
}

uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 366:	84 ec       	ldi	r24, 0xC4	; 196
 368:	86 bf       	out	0x36, r24	; 54
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
	while((TWCR & (1 << TWINT))==0);
 36a:	06 b6       	in	r0, 0x36	; 54
 36c:	07 fe       	sbrs	r0, 7
 36e:	fd cf       	rjmp	.-6      	; 0x36a <RTC_GetTimeDate+0x11a>
	return TWDR;
 370:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*date=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*month=i2c_read(1);
 372:	88 83       	st	Y, r24
	if ((TWSR & 0xF8) != 0x50)
 374:	81 b1       	in	r24, 0x01	; 1
 376:	88 7f       	andi	r24, 0xF8	; 248
 378:	80 35       	cpi	r24, 0x50	; 80
 37a:	19 f0       	breq	.+6      	; 0x382 <RTC_GetTimeDate+0x132>
		error("Error in Data recieve");
 37c:	80 ed       	ldi	r24, 0xD0	; 208
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	66 de       	rcall	.-820    	; 0x4e <error>
uint8_t i2c_read(uint8_t multi)
{
	if (multi)
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	else
		TWCR = (1<<TWINT)|(1<<TWEN);
 382:	84 e8       	ldi	r24, 0x84	; 132
 384:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT))==0);
 386:	06 b6       	in	r0, 0x36	; 54
 388:	07 fe       	sbrs	r0, 7
 38a:	fd cf       	rjmp	.-6      	; 0x386 <RTC_GetTimeDate+0x136>
	return TWDR;
 38c:	83 b1       	in	r24, 0x03	; 3
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*month=i2c_read(1);
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");
	*year=i2c_read(0);
 38e:	f6 01       	movw	r30, r12
 390:	80 83       	st	Z, r24
	/*
	if ((TWSR & 0xF8) != 0x50)
		error("Error in Data recieve");*/
	i2c_stop();
 392:	86 de       	rcall	.-756    	; 0xa0 <i2c_stop>
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	cf 90       	pop	r12
 3a4:	bf 90       	pop	r11
 3a6:	af 90       	pop	r10
 3a8:	9f 90       	pop	r9
 3aa:	8f 90       	pop	r8
 3ac:	7f 90       	pop	r7
 3ae:	6f 90       	pop	r6
 3b0:	5f 90       	pop	r5
 3b2:	4f 90       	pop	r4
 3b4:	08 95       	ret

000003b6 <bcd2ascii>:

void bcd2ascii(uint8_t bcd)
{
 3b6:	1f 93       	push	r17
 3b8:	18 2f       	mov	r17, r24
	lcd_putc('0' + (bcd>>4));
 3ba:	82 95       	swap	r24
 3bc:	8f 70       	andi	r24, 0x0F	; 15
 3be:	80 5d       	subi	r24, 0xD0	; 208
 3c0:	c8 d0       	rcall	.+400    	; 0x552 <lcd_putc>
	lcd_putc('0' + (bcd & 0x0F));	
 3c2:	81 2f       	mov	r24, r17
 3c4:	8f 70       	andi	r24, 0x0F	; 15
 3c6:	80 5d       	subi	r24, 0xD0	; 208
 3c8:	c4 d0       	rcall	.+392    	; 0x552 <lcd_putc>
}
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <main>:

int main(void)
{
 3ce:	2f 92       	push	r2
 3d0:	3f 92       	push	r3
 3d2:	5f 92       	push	r5
 3d4:	6f 92       	push	r6
 3d6:	7f 92       	push	r7
 3d8:	8f 92       	push	r8
 3da:	9f 92       	push	r9
 3dc:	af 92       	push	r10
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	27 97       	sbiw	r28, 0x07	; 7
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	87 bb       	out	0x17, r24	; 23
	uint8_t s, s_changed, m, h, day, date, month, year;
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 404:	8f e0       	ldi	r24, 0x0F	; 15
 406:	d7 d0       	rcall	.+430    	; 0x5b6 <lcd_init>
	RTC_init();
 408:	67 de       	rcall	.-818    	; 0xd8 <RTC_init>
	RTC_SetTimeDate(0x30, 0x45, 0x19, 0x01, 0x26, 0x05, 0x12);
 40a:	80 e3       	ldi	r24, 0x30	; 48
 40c:	65 e4       	ldi	r22, 0x45	; 69
 40e:	49 e1       	ldi	r20, 0x19	; 25
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	06 e2       	ldi	r16, 0x26	; 38
 414:	55 e0       	ldi	r21, 0x05	; 5
 416:	e5 2e       	mov	r14, r21
 418:	32 e1       	ldi	r19, 0x12	; 18
 41a:	c3 2e       	mov	r12, r19
 41c:	8e de       	rcall	.-740    	; 0x13a <RTC_SetTimeDate>
 41e:	25 e0       	ldi	r18, 0x05	; 5
 420:	a2 2e       	mov	r10, r18
 422:	b1 2c       	mov	r11, r1
 424:	ac 0e       	add	r10, r28
 426:	bd 1e       	adc	r11, r29
 428:	96 e0       	ldi	r25, 0x06	; 6
 42a:	89 2e       	mov	r8, r25
 42c:	91 2c       	mov	r9, r1
 42e:	8c 0e       	add	r8, r28
 430:	9d 1e       	adc	r9, r29
 432:	87 e0       	ldi	r24, 0x07	; 7
 434:	68 2e       	mov	r6, r24
 436:	71 2c       	mov	r7, r1
 438:	6c 0e       	add	r6, r28
 43a:	7d 1e       	adc	r7, r29
 43c:	1e 01       	movw	r2, r28
 43e:	08 94       	sec
 440:	21 1c       	adc	r2, r1
 442:	31 1c       	adc	r3, r1
 444:	59 80       	ldd	r5, Y+1	; 0x01
    while(1)
    {
		s_changed = s;
        RTC_GetTimeDate(&s, &m, &h, &day, &date, &month, &year);
 446:	c1 01       	movw	r24, r2
 448:	be 01       	movw	r22, r28
 44a:	6e 5f       	subi	r22, 0xFE	; 254
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	ae 01       	movw	r20, r28
 450:	4d 5f       	subi	r20, 0xFD	; 253
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	9e 01       	movw	r18, r28
 456:	2c 5f       	subi	r18, 0xFC	; 252
 458:	3f 4f       	sbci	r19, 0xFF	; 255
 45a:	85 01       	movw	r16, r10
 45c:	74 01       	movw	r14, r8
 45e:	63 01       	movw	r12, r6
 460:	f7 de       	rcall	.-530    	; 0x250 <RTC_GetTimeDate>
		if (s_changed != s)
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	85 15       	cp	r24, r5
 466:	79 f3       	breq	.-34     	; 0x446 <main+0x78>
		{
			lcd_clrscr();
 468:	6e d0       	rcall	.+220    	; 0x546 <lcd_clrscr>
			lcd_gotoxy(4,0);
 46a:	84 e0       	ldi	r24, 0x04	; 4
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	60 d0       	rcall	.+192    	; 0x530 <lcd_gotoxy>
			bcd2ascii(h);
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	a1 df       	rcall	.-190    	; 0x3b6 <bcd2ascii>
			lcd_putc(':');
 474:	8a e3       	ldi	r24, 0x3A	; 58
 476:	6d d0       	rcall	.+218    	; 0x552 <lcd_putc>
			bcd2ascii(m);
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	9d df       	rcall	.-198    	; 0x3b6 <bcd2ascii>
			lcd_putc(':');
 47c:	8a e3       	ldi	r24, 0x3A	; 58
 47e:	69 d0       	rcall	.+210    	; 0x552 <lcd_putc>
			bcd2ascii(s);
 480:	89 81       	ldd	r24, Y+1	; 0x01
 482:	99 df       	rcall	.-206    	; 0x3b6 <bcd2ascii>
			lcd_gotoxy(4,1);
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	53 d0       	rcall	.+166    	; 0x530 <lcd_gotoxy>
			bcd2ascii(date);
 48a:	8d 81       	ldd	r24, Y+5	; 0x05
 48c:	94 df       	rcall	.-216    	; 0x3b6 <bcd2ascii>
			lcd_putc(':');
 48e:	8a e3       	ldi	r24, 0x3A	; 58
 490:	60 d0       	rcall	.+192    	; 0x552 <lcd_putc>
			bcd2ascii(month);
 492:	8e 81       	ldd	r24, Y+6	; 0x06
 494:	90 df       	rcall	.-224    	; 0x3b6 <bcd2ascii>
			lcd_putc(':');
 496:	8a e3       	ldi	r24, 0x3A	; 58
 498:	5c d0       	rcall	.+184    	; 0x552 <lcd_putc>
			bcd2ascii(year);
 49a:	8f 81       	ldd	r24, Y+7	; 0x07
 49c:	8c df       	rcall	.-232    	; 0x3b6 <bcd2ascii>
 49e:	d2 cf       	rjmp	.-92     	; 0x444 <main+0x76>

000004a0 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs) 
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 4a0:	66 23       	and	r22, r22
 4a2:	c1 f4       	brne	.+48     	; 0x4d4 <lcd_write+0x34>
       lcd_rs_high();
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 4a4:	94 98       	cbi	0x12, 4	; 18
    }
    lcd_rw_low();
 4a6:	95 98       	cbi	0x12, 5	; 18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
 4a8:	91 b3       	in	r25, 0x11	; 17
 4aa:	9f 60       	ori	r25, 0x0F	; 15
 4ac:	91 bb       	out	0x11, r25	; 17

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
 4ae:	92 b3       	in	r25, 0x12	; 18
 4b0:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
 4b2:	28 2f       	mov	r18, r24
 4b4:	22 95       	swap	r18
 4b6:	2f 70       	andi	r18, 0x0F	; 15
 4b8:	29 2b       	or	r18, r25
 4ba:	22 bb       	out	0x12, r18	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4bc:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <lcd_write+0x20>
    lcd_e_low();
 4c0:	96 98       	cbi	0x12, 6	; 18
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
 4c2:	8f 70       	andi	r24, 0x0F	; 15
 4c4:	89 2b       	or	r24, r25
 4c6:	82 bb       	out	0x12, r24	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 4c8:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <lcd_write+0x2c>
    lcd_e_low();
 4cc:	96 98       	cbi	0x12, 6	; 18
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
 4ce:	9f 60       	ori	r25, 0x0F	; 15
 4d0:	92 bb       	out	0x12, r25	; 18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
 4d2:	08 95       	ret
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
       lcd_rs_high();
 4d4:	94 9a       	sbi	0x12, 4	; 18
 4d6:	e7 cf       	rjmp	.-50     	; 0x4a6 <lcd_write+0x6>

000004d8 <lcd_read.clone.0>:
    
    
    if (rs)
        lcd_rs_high();                       /* RS=1: read data      */
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 4d8:	94 98       	cbi	0x12, 4	; 18
    lcd_rw_high();                           /* RW=1  read mode      */
 4da:	95 9a       	sbi	0x12, 5	; 18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
 4dc:	81 b3       	in	r24, 0x11	; 17
 4de:	80 7f       	andi	r24, 0xF0	; 240
 4e0:	81 bb       	out	0x11, r24	; 17
        
        lcd_e_high();
 4e2:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();        
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <lcd_read.clone.0+0xe>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 4e6:	90 b3       	in	r25, 0x10	; 16
        lcd_e_low();
 4e8:	96 98       	cbi	0x12, 6	; 18
        
        lcd_e_delay();                       /* Enable 500ns low       */
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <lcd_read.clone.0+0x14>
        
        lcd_e_high();
 4ec:	96 9a       	sbi	0x12, 6	; 18
        lcd_e_delay();
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <lcd_read.clone.0+0x18>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 4f0:	80 b3       	in	r24, 0x10	; 16
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 4f2:	92 95       	swap	r25
 4f4:	90 7f       	andi	r25, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 4f6:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 4f8:	96 98       	cbi	0x12, 6	; 18
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 4fa:	89 2b       	or	r24, r25
 4fc:	08 95       	ret

000004fe <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 4fe:	ec df       	rcall	.-40     	; 0x4d8 <lcd_read.clone.0>
 500:	87 fd       	sbrc	r24, 7
 502:	fd cf       	rjmp	.-6      	; 0x4fe <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 504:	84 e0       	ldi	r24, 0x04	; 4
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <lcd_waitbusy+0xa>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 50c:	e5 df       	rcall	.-54     	; 0x4d8 <lcd_read.clone.0>
    
}/* lcd_waitbusy */
 50e:	08 95       	ret

00000510 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 510:	1f 93       	push	r17
 512:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 514:	f4 df       	rcall	.-24     	; 0x4fe <lcd_waitbusy>
    lcd_write(cmd,0);
 516:	81 2f       	mov	r24, r17
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	c2 df       	rcall	.-124    	; 0x4a0 <lcd_write>
}
 51c:	1f 91       	pop	r17
 51e:	08 95       	ret

00000520 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 520:	1f 93       	push	r17
 522:	18 2f       	mov	r17, r24
    lcd_waitbusy();
 524:	ec df       	rcall	.-40     	; 0x4fe <lcd_waitbusy>
    lcd_write(data,1);
 526:	81 2f       	mov	r24, r17
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	ba df       	rcall	.-140    	; 0x4a0 <lcd_write>
}
 52c:	1f 91       	pop	r17
 52e:	08 95       	ret

00000530 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 530:	66 23       	and	r22, r22
 532:	19 f0       	breq	.+6      	; 0x53a <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 534:	80 54       	subi	r24, 0x40	; 64
 536:	ec df       	rcall	.-40     	; 0x510 <lcd_command>
 538:	08 95       	ret
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 53a:	80 58       	subi	r24, 0x80	; 128
 53c:	e9 df       	rcall	.-46     	; 0x510 <lcd_command>
 53e:	08 95       	ret

00000540 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
 540:	de df       	rcall	.-68     	; 0x4fe <lcd_waitbusy>
}
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	08 95       	ret

00000546 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	e3 df       	rcall	.-58     	; 0x510 <lcd_command>
}
 54a:	08 95       	ret

0000054c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	e0 df       	rcall	.-64     	; 0x510 <lcd_command>
}
 550:	08 95       	ret

00000552 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 552:	1f 93       	push	r17
 554:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 556:	d3 df       	rcall	.-90     	; 0x4fe <lcd_waitbusy>
    if (c=='\n')
 558:	1a 30       	cpi	r17, 0x0A	; 10
 55a:	29 f0       	breq	.+10     	; 0x566 <lcd_putc+0x14>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 55c:	81 2f       	mov	r24, r17
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	9f df       	rcall	.-194    	; 0x4a0 <lcd_write>
    }

}/* lcd_putc */
 562:	1f 91       	pop	r17
 564:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 566:	80 34       	cpi	r24, 0x40	; 64
 568:	20 f0       	brcs	.+8      	; 0x572 <lcd_putc+0x20>
 56a:	80 e8       	ldi	r24, 0x80	; 128
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 56c:	d1 df       	rcall	.-94     	; 0x510 <lcd_command>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
 56e:	1f 91       	pop	r17
 570:	08 95       	ret

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 572:	80 ec       	ldi	r24, 0xC0	; 192
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 574:	cd df       	rcall	.-102    	; 0x510 <lcd_command>
 576:	fb cf       	rjmp	.-10     	; 0x56e <lcd_putc+0x1c>

00000578 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
 57e:	88 81       	ld	r24, Y
 580:	88 23       	and	r24, r24
 582:	29 f0       	breq	.+10     	; 0x58e <lcd_puts+0x16>
 584:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 586:	e5 df       	rcall	.-54     	; 0x552 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 588:	89 91       	ld	r24, Y+
 58a:	88 23       	and	r24, r24
 58c:	e1 f7       	brne	.-8      	; 0x586 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 59a:	fc 01       	movw	r30, r24
 59c:	84 91       	lpm	r24, Z+
 59e:	88 23       	and	r24, r24
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <lcd_puts_p+0x1c>
 5a2:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
 5a4:	d6 df       	rcall	.-84     	; 0x552 <lcd_putc>
 5a6:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 5a8:	21 96       	adiw	r28, 0x01	; 1
 5aa:	84 91       	lpm	r24, Z+
 5ac:	88 23       	and	r24, r24
 5ae:	d1 f7       	brne	.-12     	; 0x5a4 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 5b6:	1f 93       	push	r17
 5b8:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 5ba:	81 b3       	in	r24, 0x11	; 17
 5bc:	8f 67       	ori	r24, 0x7F	; 127
 5be:	81 bb       	out	0x11, r24	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5c0:	e0 e0       	ldi	r30, 0x00	; 0
 5c2:	fd e7       	ldi	r31, 0x7D	; 125
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <lcd_init+0xe>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 5c8:	91 9a       	sbi	0x12, 1	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 5ca:	90 9a       	sbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 5cc:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <lcd_init+0x1a>
    lcd_e_low();
 5d0:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5d2:	e0 e0       	ldi	r30, 0x00	; 0
 5d4:	f7 e2       	ldi	r31, 0x27	; 39
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_init+0x20>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 5da:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcd_init+0x28>
    lcd_e_low();
 5de:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5e0:	20 e8       	ldi	r18, 0x80	; 128
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <lcd_init+0x30>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 5ea:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <lcd_init+0x38>
    lcd_e_low();
 5ee:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5f0:	f9 01       	movw	r30, r18
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <lcd_init+0x3c>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 5f6:	90 98       	cbi	0x12, 0	; 18

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 5f8:	96 9a       	sbi	0x12, 6	; 18
    lcd_e_delay();
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <lcd_init+0x46>
    lcd_e_low();
 5fc:	96 98       	cbi	0x12, 6	; 18
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 5fe:	f9 01       	movw	r30, r18
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <lcd_init+0x4a>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	84 df       	rcall	.-248    	; 0x510 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 608:	88 e0       	ldi	r24, 0x08	; 8
 60a:	82 df       	rcall	.-252    	; 0x510 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 60c:	9c df       	rcall	.-200    	; 0x546 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	7f df       	rcall	.-258    	; 0x510 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 612:	81 2f       	mov	r24, r17
 614:	7d df       	rcall	.-262    	; 0x510 <lcd_command>

}/* lcd_init */
 616:	1f 91       	pop	r17
 618:	08 95       	ret

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
