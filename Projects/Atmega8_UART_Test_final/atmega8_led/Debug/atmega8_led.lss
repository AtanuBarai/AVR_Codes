
atmega8_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000055  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000256  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ad  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012b  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000080  00000000  00000000  00001107  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	12 d0       	rcall	.+36     	; 0x58 <main>
  34:	4a c0       	rjmp	.+148    	; 0xca <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <USART_Initialize>:


void USART_Initialize()
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  38:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)ubrr;
  3a:	83 e3       	ldi	r24, 0x33	; 51
  3c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  3e:	88 e1       	ldi	r24, 0x18	; 24
  40:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  42:	86 e8       	ldi	r24, 0x86	; 134
  44:	80 bd       	out	0x20, r24	; 32
}
  46:	08 95       	ret

00000048 <USART_Transmit>:

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  48:	5d 9b       	sbis	0x0b, 5	; 11
  4a:	fe cf       	rjmp	.-4      	; 0x48 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  4c:	8c b9       	out	0x0c, r24	; 12
}
  4e:	08 95       	ret

00000050 <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  50:	5f 9b       	sbis	0x0b, 7	; 11
  52:	fe cf       	rjmp	.-4      	; 0x50 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  54:	8c b1       	in	r24, 0x0c	; 12
}
  56:	08 95       	ret

00000058 <main>:

int main(void)
{
	unsigned char ch;
	unsigned int i;
	DDRB = 0xFF;
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	87 bb       	out	0x17, r24	; 23


void USART_Initialize()
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  5c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)ubrr;
  5e:	83 e3       	ldi	r24, 0x33	; 51
  60:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  62:	88 e1       	ldi	r24, 0x18	; 24
  64:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  66:	86 e8       	ldi	r24, 0x86	; 134
  68:	80 bd       	out	0x20, r24	; 32
			PORTB = 0x0A;
			
		}
		else if (ch == 'r')
		{
			PORTB = 0x02;
  6a:	e2 e0       	ldi	r30, 0x02	; 2
			for (i=0; i<1;i++)
			{
				_delay_ms(1000);
			}
			PORTB = 0x0A;
  6c:	9a e0       	ldi	r25, 0x0A	; 10
		{
			PORTB = 0x05;
		}
		else if (ch == 'l')
		{
			PORTB = 0x08;
  6e:	38 e0       	ldi	r19, 0x08	; 8
		{
			PORTB = 0x0A;
		}
		else if (ch == 'b')
		{
			PORTB = 0x05;
  70:	25 e0       	ldi	r18, 0x05	; 5
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  72:	5f 9b       	sbis	0x0b, 7	; 11
  74:	fe cf       	rjmp	.-4      	; 0x72 <main+0x1a>
	/* Get and return received data from buffer */
	return UDR;
  76:	8c b1       	in	r24, 0x0c	; 12
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  78:	5d 9b       	sbis	0x0b, 5	; 11
  7a:	fe cf       	rjmp	.-4      	; 0x78 <main+0x20>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  7c:	8c b9       	out	0x0c, r24	; 12
	USART_Initialize();
    while(1)
    {
		ch = USART_Receive();
		USART_Transmit(ch);
		if (ch == 'f')
  7e:	86 36       	cpi	r24, 0x66	; 102
  80:	a1 f0       	breq	.+40     	; 0xaa <main+0x52>
		{
			PORTB = 0x0A;
		}
		else if (ch == 'b')
  82:	82 36       	cpi	r24, 0x62	; 98
  84:	a1 f0       	breq	.+40     	; 0xae <main+0x56>
		{
			PORTB = 0x05;
		}
		else if (ch == 'l')
  86:	8c 36       	cpi	r24, 0x6C	; 108
  88:	a1 f0       	breq	.+40     	; 0xb2 <main+0x5a>
				_delay_ms(1000);
			}
			PORTB = 0x0A;
			
		}
		else if (ch == 'r')
  8a:	82 37       	cpi	r24, 0x72	; 114
  8c:	21 f0       	breq	.+8      	; 0x96 <main+0x3e>
			{
				_delay_ms(1000);
			}
			PORTB = 0x0A;
		}
		else if (ch == 's')
  8e:	83 37       	cpi	r24, 0x73	; 115
  90:	81 f7       	brne	.-32     	; 0x72 <main+0x1a>
		{
			PORTB = 0x00;
  92:	18 ba       	out	0x18, r1	; 24
  94:	ee cf       	rjmp	.-36     	; 0x72 <main+0x1a>
			PORTB = 0x0A;
			
		}
		else if (ch == 'r')
		{
			PORTB = 0x02;
  96:	e8 bb       	out	0x18, r30	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	4f ef       	ldi	r20, 0xFF	; 255
  9a:	59 e6       	ldi	r21, 0x69	; 105
  9c:	68 e1       	ldi	r22, 0x18	; 24
  9e:	41 50       	subi	r20, 0x01	; 1
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	60 40       	sbci	r22, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x46>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x50>
  a8:	00 00       	nop
			for (i=0; i<1;i++)
			{
				_delay_ms(1000);
			}
			PORTB = 0x0A;
  aa:	98 bb       	out	0x18, r25	; 24
  ac:	e2 cf       	rjmp	.-60     	; 0x72 <main+0x1a>
		{
			PORTB = 0x0A;
		}
		else if (ch == 'b')
		{
			PORTB = 0x05;
  ae:	28 bb       	out	0x18, r18	; 24
  b0:	e0 cf       	rjmp	.-64     	; 0x72 <main+0x1a>
		}
		else if (ch == 'l')
		{
			PORTB = 0x08;
  b2:	38 bb       	out	0x18, r19	; 24
  b4:	4f ef       	ldi	r20, 0xFF	; 255
  b6:	59 e6       	ldi	r21, 0x69	; 105
  b8:	68 e1       	ldi	r22, 0x18	; 24
  ba:	41 50       	subi	r20, 0x01	; 1
  bc:	50 40       	sbci	r21, 0x00	; 0
  be:	60 40       	sbci	r22, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x62>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x6c>
  c4:	00 00       	nop
			for (i=0; i<1;i++)
			{
				_delay_ms(1000);
			}
			PORTB = 0x0A;
  c6:	98 bb       	out	0x18, r25	; 24
  c8:	d4 cf       	rjmp	.-88     	; 0x72 <main+0x1a>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
