
Atmega32_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000084d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002f  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000199  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000131  00000000  00000000  00000a35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001cc  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000110  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_master_init>:
#define MISO 6
#define SCK 7

void SPI_master_init()
{
	DDRB = (1 << MOSI)|(0 << MISO)|(1 << SCK)|(1 << SS);
  6c:	80 eb       	ldi	r24, 0xB0	; 176
  6e:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<SPR0); // Set as master and clock fosc/16 & polling
  70:	81 e5       	ldi	r24, 0x51	; 81
  72:	8d b9       	out	0x0d, r24	; 13
}
  74:	08 95       	ret

00000076 <main>:
int main(void)
{
	DDRA = 0xFF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8a bb       	out	0x1a, r24	; 26
#define MISO 6
#define SCK 7

void SPI_master_init()
{
	DDRB = (1 << MOSI)|(0 << MISO)|(1 << SCK)|(1 << SS);
  7a:	80 eb       	ldi	r24, 0xB0	; 176
  7c:	87 bb       	out	0x17, r24	; 23
	SPCR = (1 << SPE)|(1<<MSTR)|(1<<SPR0); // Set as master and clock fosc/16 & polling
  7e:	81 e5       	ldi	r24, 0x51	; 81
  80:	8d b9       	out	0x0d, r24	; 13
}
int main(void)
{
	DDRA = 0xFF;
	char val = 0;
  82:	80 e0       	ldi	r24, 0x00	; 0
	SPI_master_init();
    while(1)
    {
        SPDR = val;
  84:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR &(1<<SPIF)));
  86:	77 9b       	sbis	0x0e, 7	; 14
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x10>
		PORTA = SPDR;
  8a:	9f b1       	in	r25, 0x0f	; 15
  8c:	9b bb       	out	0x1b, r25	; 27
		val++;
  8e:	8f 5f       	subi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	37 e8       	ldi	r19, 0x87	; 135
  94:	43 e1       	ldi	r20, 0x13	; 19
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x20>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x2a>
  a0:	00 00       	nop
  a2:	f0 cf       	rjmp	.-32     	; 0x84 <main+0xe>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>
